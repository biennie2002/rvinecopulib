[{"path":"https://vinecopulib.github.io/rvinecopulib/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Nagler. Author, maintainer. Thibault Vatter. Author.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nagler T, Vatter T (2025). rvinecopulib: High Performance Algorithms Vine Copula Modeling. R package version 0.7.3.1.0, https://vinecopulib.github.io/rvinecopulib/.","code":"@Manual{,   title = {rvinecopulib: High Performance Algorithms for Vine Copula Modeling},   author = {Thomas Nagler and Thibault Vatter},   year = {2025},   note = {R package version 0.7.3.1.0},   url = {https://vinecopulib.github.io/rvinecopulib/}, }"},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"rvinecopulib","dir":"","previous_headings":"","what":"High Performance Algorithms for Vine Copula Modeling","title":"High Performance Algorithms for Vine Copula Modeling","text":"Vine copulas flexible class dependence models consisting bivariate building blocks (see e.g., Aas et al., 2009). can find comprehensive list publications materials vine-copula.org. package R API C++ library vinecopulib, header-C++ library vine copula models based Boost Eigen. provides high-performance implementations core features popular VineCopula R library, particular inference algorithms vine copula bivariate copula models. Advantages VineCopula * sleaker modern API, * shorter runtimes, especially high dimensions, * nonparametric multi-parameter families, * ability model discrete variables. VineCopula, package primarily made statistical analysis vine copula models. package includes tools parameter estimation, model selection, simulation, visualization. Tools estimation, selection exploratory data analysis bivariate copula models also provided. Please see API documentation detailed description functions.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"High Performance Algorithms for Vine Copula Modeling","text":"Table contents install Bivariate copula modeling: bicop_dist bicop Vine copula modeling: vinecop_dist vinecop Bivariate copula families References","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"High Performance Algorithms for Vine Copula Modeling","text":"can install: stable release CRAN: latest development version:","code":"install.packages(\"rvinecopulib\") remotes::install_github(\"vinecopulib/rvinecopulib\")"},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"High Performance Algorithms for Vine Copula Modeling","text":", list functions features know . usual copula models, data assumed serially independent lie unit hypercube.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"bivariate-copula-modeling-bicop_dist-and-bicop","dir":"","previous_headings":"Package overview","what":"Bivariate copula modeling: bicop_dist and bicop","title":"High Performance Algorithms for Vine Copula Modeling","text":"bicop_dist: Creates bivariate copula specifying family, rotation parameters. Returns object class bicop_dist. class following methods: print: brief overview bivariate copula. plot, contour: surface/perspective contour plots copula density. Possibly coupled standard normal margins (default contour). dbicop, pbicop, rbicop, hbicop: Density, distribution function, random generation H-functions (inverses) bivariate copula distributions. Additionally evaluation points, can provide either family, rotation parameter, object class bicop_dist. bicop: Estimates parameters bivariate copula. Estimation can done maximum likelihood (par_method = \"mle\") inversion empirical Kendall’s tau (par_method = \"itau\", available one-parameter families) parametric families, using local-likelihood approximations order zero/one/two nonparametric models (nonpar_method=\"constant\"/nonpar_method=\"linear\"/nonpar_method=\"quadratic\"). family_set vector families, family selected using selcrit=\"loglik\", selcrit=\"aic\" selcrit=\"bic\". function returns object classes bicop bicop_dist. class bicop following following methods: print: comprehensive overview bivariate copula model fit statistics. predict, fitted: predictions fitted values bivariate copula model. nobs, logLik, AIC, BIC: usual fit statistics.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"vine-copula-modeling-vinecop_dist-and-vinecop","dir":"","previous_headings":"Package overview","what":"Vine copula modeling: vinecop_dist and vinecop","title":"High Performance Algorithms for Vine Copula Modeling","text":"vinecop_dist: Creates vine copula specifying nested list bicop_dist objects quadratic structure matrix. Returns object class vinecop_dist. class following methods: print, summary: brief comprehensive overview vine copula. plot: plots vine structure. dvinecop, pvinecop, rvinecop: Density, distribution function, random generation vine copula distributions. vinecop: automated fitting vine copula models. function inherits parameters bicop. Optionally, quadratic matrix can used input pre-specify vine structure. tree_crit describes criterion tree selection, one \"tau\", \"rho\", \"hoeffd\" Kendall’s tau, Spearman’s rho, Hoeffding’s D, respectively. Additionally, threshold allows threshold tree_crit trunc_lvl truncate vine copula, threshold_sel trunc_lvl_sel automatically select parameters. function returns object classes vinecop vinecop_dist. class vinecop following following methods: print, summary: brief comprehensive overview vine copula additional fit statistics information. predict, fitted: predictions fitted values vine copula model. nobs, logLik, AIC, BIC: usual fit statistics.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"bivariate-copula-families","dir":"","previous_headings":"Package overview","what":"Bivariate copula families","title":"High Performance Algorithms for Vine Copula Modeling","text":"package several bivariate copula families included bivariate multivariate analysis using vine copulas. provides functionality elliptical (Gaussian Student-t) well Archimedean (Clayton, Gumbel, Frank, Joe, BB1, BB6, BB7 BB8) copulas cover large range dependence patterns. Archimedean copula families, rotated versions included cover negative dependence well. Additionally, nonparametric families also supported. Note several convenience vectors families included: * \"\" contains families * \"parametric\" contains parametric families (except \"tll\") * \"nonparametric\" contains nonparametric families (\"indep\" \"tll\") * \"one_par\" contains parametric families single parameter (\"gaussian\", \"clayton\", \"gumbel\", \"frank\", \"joe\") * \"two_par\" contains parametric families two parameters (\"t\", \"bb1\", \"bb6\", \"bb7\", \"bb8\") * \"elliptical\" contains elliptical families * \"archimedean\" contains archimedean families * \"BB\" contains BB families * \"itau\" families estimation Kendall’s tau inversion available (\"indep\",\"gaussian\", \"t\",\"clayton\", \"gumbel\", \"frank\", \"joe\") following table shows parameter ranges bivariate copula families one two parameters:","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"High Performance Algorithms for Vine Copula Modeling","text":"Aas, K., C. Czado, . Frigessi, H. Bakken (2009). Pair-copula constructions multiple dependence. Insurance: Mathematics Economics 44 (2), 182-198.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as.bicop.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list to bicop object — as.bicop","title":"Convert list to bicop object — as.bicop","text":"Convert list bicop object","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as.bicop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list to bicop object — as.bicop","text":"","code":"as.bicop(object, check = TRUE)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as.bicop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list to bicop object — as.bicop","text":"object list containing entries \"family\", \"rotation\", \"parameters\", \"npars\". check whether check validity family/parameter specification.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as.bicop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list to bicop object — as.bicop","text":"bicop object corresponding specification object.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as.bicop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert list to bicop object — as.bicop","text":"","code":"as.bicop(list(family = \"gumbel\", rotation = 90, parameters = 2, npars = 1)) #> Bivariate copula fit ('bicop'): family = gumbel, rotation = 90, parameters = 2, var_types = c,c"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as_rvine_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce various kind of objects to R-vine structures and matrices — as_rvine_structure","title":"Coerce various kind of objects to R-vine structures and matrices — as_rvine_structure","text":"as_rvine_structure as_rvine_matrix new S3 generics allowing coerce objects R-vine structures matrices (see rvine_structure() rvine_matrix()).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as_rvine_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce various kind of objects to R-vine structures and matrices — as_rvine_structure","text":"","code":"as_rvine_structure(x, ...)  as_rvine_matrix(x, ...)  # S3 method for class 'rvine_structure' as_rvine_structure(x, ..., validate = FALSE)  # S3 method for class 'rvine_structure' as_rvine_matrix(x, ..., validate = FALSE)  # S3 method for class 'list' as_rvine_structure(x, ..., is_natural_order = FALSE)  # S3 method for class 'list' as_rvine_matrix(x, ..., is_natural_order = FALSE)  # S3 method for class 'rvine_matrix' as_rvine_structure(x, ..., validate = FALSE)  # S3 method for class 'rvine_matrix' as_rvine_matrix(x, ..., validate = FALSE)  # S3 method for class 'matrix' as_rvine_structure(x, ..., validate = TRUE)  # S3 method for class 'matrix' as_rvine_matrix(x, ..., validate = TRUE)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as_rvine_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce various kind of objects to R-vine structures and matrices — as_rvine_structure","text":"x object class rvine_structure, rvine_matrix, matrix list can coerced R-vine structure R-vine matrix (see Details). ... arguments passed individual methods. validate `TRUE“, verifies input valid rvine-structure (see Details). may want suppress know already valid structure want save time, explicitly enable structure want re-check. is_natural_order flag indicating whether struct_array element x assumed provided natural order already (structure natural order anti-diagonal 1, .., d bottom left top right).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as_rvine_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce various kind of objects to R-vine structures and matrices — as_rvine_structure","text":"Either object class rvine_structure class rvine_matrix (see rvine_structure() rvine_matrix()).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as_rvine_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce various kind of objects to R-vine structures and matrices — as_rvine_structure","text":"coercion rvine_structure rvine_matrix can applied different kind objects Currently, rvine_structure, rvine_matrix, matrix list supported. as_rvine_structure: rvine_structure : main use case re-check object via validate = TRUE. rvine_matrix matrix : allow coerce matrices R-vine structures (see rvine_structure() details). main difference rvine_matrix matrix nature validity checks. list : must contain named elements order struct_array coerced R-vine structure (see rvine_structure() details). as_rvine_matrix: rvine_structure : allow coerce rvine_structure R-vine matrix (useful e.g. printing). rvine_matrix: similar as_rvine_structure rvine_structure, main use case re-check object via validate = TRUE. matrix : allow coerce matrices R-vine matrices (mainly checking matrix defines valid R-vine, see rvine_matrix() details). list : must contain named elements order struct_array coerced R-vine matrix (see rvine_structure() details).","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/as_rvine_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce various kind of objects to R-vine structures and matrices — as_rvine_structure","text":"","code":"# R-vine structures can be constructed from the order vector and struct_array rvine_structure(order = 1:4, struct_array = list(   c(4, 4, 4),   c(3, 3),   2 )) #> 4-dimensional R-vine structure ('rvine_structure') #> 4 4 4 4 #> 3 3 3   #> 2 2     #> 1        # ... or a similar list can be coerced into an R-vine structure as_rvine_structure(list(order = 1:4, struct_array = list(   c(4, 4, 4),   c(3, 3),   2 ))) #> 4-dimensional R-vine structure ('rvine_structure') #> 4 4 4 4 #> 3 3 3   #> 2 2     #> 1        # similarly, standard matrices can be coerced into R-vine structures mat <- matrix(c(4, 3, 2, 1, 4, 3, 2, 0, 4, 3, 0, 0, 4, 0, 0, 0), 4, 4) as_rvine_structure(mat) #> 4-dimensional R-vine structure ('rvine_structure') #> 4 4 4 4 #> 3 3 3   #> 2 2     #> 1        # or truncate and construct the structure mat[3, 1] <- 0 as_rvine_structure(mat) #> 4-dimensional R-vine structure ('rvine_structure'), 2-truncated #> 4 4 4 4 #> 3 3 3   #>   2     #> 1        # throws an error mat[3, 1] <- 5 try(as_rvine_structure(mat)) #> Error : not a valid R-vine array: the upper left triangle can only contain numbers between 1 and d (number of variables)."},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and select bivariate copula models — bicop","title":"Fit and select bivariate copula models — bicop","text":"Fit bivariate copula model continuous discrete data. family can selected automatically vector options.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and select bivariate copula models — bicop","text":"","code":"bicop(   data,   var_types = c(\"c\", \"c\"),   family_set = \"all\",   par_method = \"mle\",   nonpar_method = \"quadratic\",   mult = 1,   selcrit = \"aic\",   weights = numeric(),   psi0 = 0.9,   presel = TRUE,   allow_rotations = TRUE,   keep_data = FALSE,   cores = 1 )"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and select bivariate copula models — bicop","text":"data matrix data.frame least two columns, containing (pseudo-)observations two variables (copula data approximately uniform margins). columns required discrete models, see Details. var_types variable types, length 2 vector; e.g., c(\"c\", \"c\") continuous (default), c(\"c\", \"d\") first variable continuous second discrete. family_set character vector families; see Details additional options. par_method estimation method parametric models, either \"mle\" maximum likelihood \"itau\" inversion Kendall's tau (available one-parameter families \"t\". nonpar_method estimation method nonparametric models, either \"constant\" standard transformation estimator, \"linear\"/\"quadratic\" local-likelihood approximations order one/two. mult multiplier smoothing parameters nonparametric families. Values larger 1 make estimate smooth, values less 1 less smooth. selcrit criterion family selection, either \"loglik\", \"aic\", \"bic\", \"mbic\". vinecop() additional option \"mbicv\". weights optional vector weights observation. psi0 see mBICV(). presel whether family set thinned according symmetry characteristics data. allow_rotations whether allow rotations copula. keep_data whether data stored (necessary using fitted()). cores number cores use; 1, estimation multiple families done parallel.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and select bivariate copula models — bicop","text":"object inheriting classes bicop  bicop_dist . addition entries contained bicop_dist(), objects bicop class contain: data (optionally, keep_data = TRUE used), dataset passed bicop(). controls, list set fit controls passed bicop(). loglik log-likelihood. nobs, integer number observations used fit model.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit and select bivariate copula models — bicop","text":"missing data (.e., NA entries), incomplete observations discarded fitting copula.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":"discrete-variables","dir":"Reference","previous_headings":"","what":"Discrete variables","title":"Fit and select bivariate copula models — bicop","text":"least one variable discrete, two columns required data: first \\(n \\times 2\\) block contains realizations \\(F_{X_1}(x_1), F_{X_2}(x_2)\\). second \\(n \\times 2\\) block contains realizations \\(F_{X_1}(x_1^-), F_{X_2}(x_2^-)\\). minus indicates left-sided limit cdf. , e.g., integer-valued variable, holds \\(F_{X_1}(x_1^-) = F_{X_1}(x_1 - 1)\\). continuous variables left limit cdf coincide. Respective columns can omitted second block.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":"family-collections","dir":"Reference","previous_headings":"","what":"Family collections","title":"Fit and select bivariate copula models — bicop","text":"family_set argument accepts families bicop_dist() plus following convenience definitions: \"\" contains families, \"parametric\" contains parametric families (except \"tll\"), \"nonparametric\" contains nonparametric families (\"indep\" \"tll\") \"onepar\" contains parametric families single parameter, (\"gaussian\", \"clayton\", \"gumbel\", \"frank\", \"joe\"), \"twopar\" contains parametric families two parameters, (\"t\", \"bb1\", \"bb6\", \"bb7\", \"bb8\"), \"threepar\" contains paramtric families three parameters, (\"tawn\"), \"elliptical\" contains elliptical families, \"archimedean\" contains archimedean families, \"ev\" contains extreme-value families, \"BB\" contains BB families, \"itau\" families estimation Kendall's tau inversion available (\"indep\",\"gaussian\", \"t\",\"clayton\", \"gumbel\", \"frank\", \"joe\").","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and select bivariate copula models — bicop","text":"","code":"## fitting a continuous model from simulated data u <- rbicop(100, \"clayton\", 90, 3) fit <- bicop(u, family_set = \"par\") summary(fit) #> Bivariate copula fit ('bicop'): family = bb7, rotation = 90, parameters = 1.48, 2.35, var_types = c,c #> nobs = 100   logLik = 63.34   npars = 2   AIC = -122.67   BIC = -117.46     ## compare fit with true model contour(fit) contour(bicop_dist(\"clayton\", 90, 3), col = 2, add = TRUE)   ## fit a model from discrete data x_disc <- qpois(u, 1)  # transform to Poisson margins plot(x_disc)  udisc <- cbind(ppois(x_disc, 1), ppois(x_disc - 1, 1)) fit_disc <- bicop(udisc, var_types = c(\"d\", \"d\")) summary(fit_disc) #> Bivariate copula fit ('bicop'): family = tawn, rotation = 270, parameters = 0.56, 1, 7, var_types = d,d #> nobs = 100   logLik = 36.43   npars = 3   AIC = -66.86   BIC = -59.05"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate copula models — bicop_dist","title":"Bivariate copula models — bicop_dist","text":"Create custom bivariate copula models specifying family, rotation, parameters, variable types.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate copula models — bicop_dist","text":"","code":"bicop_dist(   family = \"indep\",   rotation = 0,   parameters = numeric(0),   var_types = c(\"c\", \"c\") )"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate copula models — bicop_dist","text":"family copula family, string containing family name (see Details possible families). rotation rotation copula, one 0, 90, 180, 270. parameters vector matrix copula parameters. var_types variable types, length 2 vector; e.g., c(\"c\", \"c\") continuous (default), c(\"c\", \"d\") first variable continuous second discrete.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate copula models — bicop_dist","text":"object class bicop_dist, .e., list containing: family, character indicating copula family. rotation, integer indicating rotation (.e., either 0, 90, 180, 270). parameters, numeric vector matrix parameters. npars, numeric (effective) number parameters. var_types, variable types.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate copula models — bicop_dist","text":"","code":"## Clayton 90° copula with parameter 3 cop <- bicop_dist(\"clayton\", 90, 3) cop #> Bivariate copula ('bicop_dist'): family = clayton, rotation = 90, parameters = 3, var_types = c,c str(cop) #> List of 5 #>  $ family    : chr \"clayton\" #>  $ rotation  : num 90 #>  $ parameters: num [1, 1] 3 #>  $ var_types : chr [1:2] \"c\" \"c\" #>  $ npars     : int 1 #>  - attr(*, \"class\")= chr \"bicop_dist\"  ## visualization plot(cop)  contour(cop)  plot(rbicop(200, cop))   ## BB8 copula model for discrete data cop_disc <- bicop_dist(\"bb8\", 0, c(2, 0.5), var_types = c(\"d\", \"d\")) cop_disc #> Bivariate copula ('bicop_dist'): family = bb8, rotation = 0, parameters = 2, 0.5, var_types = d,d"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate copula distributions — bicop_distributions","title":"Bivariate copula distributions — bicop_distributions","text":"Density, distribution function, random generation h-functions (inverses) bivariate copula distribution.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate copula distributions — bicop_distributions","text":"","code":"dbicop(u, family, rotation, parameters, var_types = c(\"c\", \"c\"))  pbicop(u, family, rotation, parameters, var_types = c(\"c\", \"c\"))  rbicop(n, family, rotation, parameters, qrng = FALSE)  hbicop(   u,   cond_var,   family,   rotation,   parameters,   inverse = FALSE,   var_types = c(\"c\", \"c\") )"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate copula distributions — bicop_distributions","text":"u evaluation points, matrix least two columns, see Details. family copula family, string containing family name (see bicop possible families). rotation rotation copula, one 0, 90, 180, 270. parameters vector matrix copula parameters. var_types variable types, length 2 vector; e.g., c(\"c\", \"c\") continuous (default), c(\"c\", \"d\") first variable continuous second discrete. n number observations. `length(n) > 1“, length taken number required. qrng TRUE, generates quasi-random numbers using bivariate Generalized Halton sequence (default qrng = FALSE). cond_var either 1 2; cond_var = 1 conditions first variable, cond_var = 2 second. inverse whether compute h-function inverse.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate copula distributions — bicop_distributions","text":"dbicop() gives density, pbicop() gives distribution function, rbicop() generates random deviates, hbicop() gives h-functions (inverses). length result determined n rbicop(), number rows u functions. numerical arguments n recycled length result.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bivariate copula distributions — bicop_distributions","text":"See bicop various implemented copula families. copula density defined joint density divided marginal densities, irrespective variable types. H-functions (hbicop()) conditional distributions derived copula. \\(C(u, v) = P(U \\le u, V \\le v)\\) copula, $$h_1(u, v) = P(V \\le v | U = u) = \\partial C(u, v) / \\partial u,$$ $$h_2(u, v) = P(U \\le u | V = v) = \\partial C(u, v) / \\partial v.$$ words, H-function number refers conditioning variable. inverting H-functions, inverse taken respect variable, v cond_var = 1 u cond_var = 2.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":"discrete-variables","dir":"Reference","previous_headings":"","what":"Discrete variables","title":"Bivariate copula distributions — bicop_distributions","text":"least one variable discrete, two columns required u: first \\(n \\times 2\\) block contains realizations \\(F_{X_1}(x_1), F_{X_2}(x_2)\\). second \\(n \\times 2\\) block contains realizations \\(F_{X_1}(x_1^-), F_{X_2}(x_2^-)\\). minus indicates left-sided limit cdf. , e.g., integer-valued variable, holds \\(F_{X_1}(x_1^-) = F_{X_1}(x_1 - 1)\\). continuous variables left limit cdf coincide. Respective columns can omitted second block.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bivariate copula distributions — bicop_distributions","text":"functions can optionally used bicop_dist object place family argument, e.g., dbicop(c(0.1, 0.5), bicop_dist(\"indep\")) hbicop(c(0.1, 0.5), 2, bicop_dist(\"indep\")).","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/bicop_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate copula distributions — bicop_distributions","text":"","code":"## evaluate the copula density dbicop(c(0.1, 0.2), \"clay\", 90, 3) #> [1] 0.04843628 dbicop(c(0.1, 0.2), bicop_dist(\"clay\", 90, 3)) #> [1] 0.04843628  ## evaluate the copula cdf pbicop(c(0.1, 0.2), \"clay\", 90, 3) #> [1] 0.0001978703  ## simulate data plot(rbicop(500, \"clay\", 90, 3))   ## h-functions joe_cop <- bicop_dist(\"joe\", 0, 3) # h_1(0.1, 0.2) hbicop(c(0.1, 0.2), 1, \"bb8\", 0, c(2, 0.5)) #> [1] 0.2436951 # h_2^{-1}(0.1, 0.2) hbicop(c(0.1, 0.2), 2, joe_cop, inverse = TRUE) #> [1] 0.05221261  ## mixed discrete and continuous data x <- cbind(rpois(10, 1), rnorm(10, 1)) u <- cbind(ppois(x[, 1], 1), pnorm(x[, 2]), ppois(x[, 1] - 1, 1)) pbicop(u, \"clay\", 90, 3, var_types = c(\"d\", \"c\")) #>  [1] 0.726466873 0.001055373 0.502213354 0.180035017 0.716504356 0.253953372 #>  [7] 0.621916144 0.565928213 0.510552135 0.306905371"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/emp_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Corrected Empirical CDF — emp_cdf","title":"Corrected Empirical CDF — emp_cdf","text":"empirical CDF tail correction, ensuring output never 0 1.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/emp_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corrected Empirical CDF — emp_cdf","text":"","code":"emp_cdf(x)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/emp_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corrected Empirical CDF — emp_cdf","text":"x numeric vector observations","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/emp_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corrected Empirical CDF — emp_cdf","text":"function signature function(x) returns \\(F_n(x)\\).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/emp_cdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Corrected Empirical CDF — emp_cdf","text":"corrected empirical CDF defined $$ F_n(x) = \\frac{1}{n + 1} \\max\\biggl\\{1, \\sum_{= 1}^n 1(X_i \\le x)\\biggr\\} $$","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/emp_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corrected Empirical CDF — emp_cdf","text":"","code":"# fit ECDF on simulated data x <- rnorm(100) cdf <- emp_cdf(x)  # output is bounded away from 0 and 1 cdf(-50) #> [1] 0.00990099 cdf(50) #> [1] 0.990099"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts components of bicop_dist and vinecop_dist objects — getters","title":"Extracts components of bicop_dist and vinecop_dist objects — getters","text":"Extracts either structure matrix  (vinecop_dist ), pair-copulas, parameters, Kendall's taus, families (bicop_dist vinecop_dist).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts components of bicop_dist and vinecop_dist objects — getters","text":"","code":"get_structure(object)  get_pair_copula(object, tree = NA, edge = NA)  get_parameters(object, tree = NA, edge = NA)  get_ktau(object, tree = NA, edge = NA)  get_family(object, tree = NA, edge = NA)  get_all_pair_copulas(object, trees = NA)  get_all_parameters(object, trees = NA)  get_all_ktaus(object, trees = NA)  get_all_families(object, trees = NA)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts components of bicop_dist and vinecop_dist objects — getters","text":"object bicop_dist, vinecop_dist vine_dist object. tree tree index (required object class bicop_dist). edge edge index (required object class bicop_dist). trees trees extract object (trees = NA extracts trees).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts components of bicop_dist and vinecop_dist objects — getters","text":"structure matrix, pair-copulas, parameters, Kendall's taus, families.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/getters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts components of bicop_dist and vinecop_dist objects — getters","text":"#' get_structure method (vinecop_dist vine_dist objects ) extracts structure (see rvine_structure details). get_matrix method (vinecop_dist vine_dist objects ) extracts structure matrix (see rvine_structure details). get_xyz methods vinecop_dist vine_dist objects return entries corresponding pair-copula indexed tree edge. object class bicop_dist, tree edge required. get_pair_copula() = pair-copula (see bicop). get_parameters() = parameters pair-copula (.e., numeric scalar, vector, matrix). get_family() = character family (see bicop implemented families). get_ktau() = numeric scalar pair-copula Kendall's tau. get_all_xyz methods (vinecop_dist vine_dist objects ) return lists lists, element corresponding tree trees, elements sublists correspond edges. returned lists two additional attributes: \"d\" = dimension model. \"trees\" = extracted trees.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts components of bicop_dist and vinecop_dist objects — getters","text":"","code":"# specify pair-copulas bicop <- bicop_dist(\"bb1\", 90, c(3, 2)) pcs <- list(   list(bicop, bicop), # pair-copulas in first tree   list(bicop) # pair-copulas in second tree )  # specify R-vine matrix mat <- matrix(c(1, 2, 3, 1, 2, 0, 1, 0, 0), 3, 3)  # set up vine copula model vc <- vinecop_dist(pcs, mat)  # get the structure get_structure(vc) #> 3-dimensional R-vine structure ('rvine_structure') #> 1 1 1 #> 2 2   #> 3     all(get_matrix(vc) == mat) #> [1] TRUE  # get pair-copulas get_pair_copula(vc, 1, 1) #> Bivariate copula ('bicop_dist'): family = bb1, rotation = 90, parameters = 3, 2, var_types = c,c get_all_pair_copulas(vc) #> Nested list of lists for the pair-copulas of a 3 dimensional vine with all trees:  #> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  #> x[[1]] -> a list with the 2 pair-copulas of tree 1.  #> x[[2]] -> a list with the 1 pair-copulas of tree 2.  all.equal(get_all_pair_copulas(vc), pcs,           check.attributes = FALSE, check.environment = FALSE) #> [1] TRUE"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/mBICV.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified vine copula Bayesian information criterion (mBICv) — mBICV","title":"Modified vine copula Bayesian information criterion (mBICv) — mBICV","text":"Calculates modified vine copula Bayesian information criterion.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/mBICV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified vine copula Bayesian information criterion (mBICv) — mBICV","text":"","code":"mBICV(object, psi0 = 0.9, newdata = NULL)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/mBICV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified vine copula Bayesian information criterion (mBICv) — mBICV","text":"object fitted vinecop object. psi0 baseline prior probability non-independence copula. newdata optional; new data set.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/mBICV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modified vine copula Bayesian information criterion (mBICv) — mBICV","text":"modified vine copula Bayesian information criterion (mBICv) defined $$BIC = -2 loglik +  \\nu log(n) - 2 \\sum_{t=1}^{d - 1} (q_t log(\\psi_0^t) - (d - t - q_t) log(1 - \\psi_0^t)) $$ \\(\\mathrm{loglik}\\) log-likelihood \\(\\nu\\) (effective) number parameters model, \\(t\\) tree level \\(\\psi_0\\) prior probability non-independence copula \\(q_t\\) number non-independence copulas tree \\(t\\). mBICv consistent model selection criterion parametric sparse vine copula models.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/mBICV.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modified vine copula Bayesian information criterion (mBICv) — mBICV","text":"Nagler, T., Bumann, C., Czado, C. (2019). Model selection sparse high-dimensional vine copulas application portfolio risk. Journal Multivariate Analysis, press (http://arxiv.org/pdf/1801.09739)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/mBICV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified vine copula Bayesian information criterion (mBICv) — mBICV","text":"","code":"u <- sapply(1:5, function(i) runif(50)) fit <- vinecop(u, family = \"par\", keep_data = TRUE) mBICV(fit, 0.9) # with a 0.9 prior probability of a non-independence copula #> [1] 17.66954 mBICV(fit, 0.1) # with a 0.1 prior probability of a non-independence copula #> [1] 68.88675"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pairs_copula_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Exploratory pairs plot for copula data — pairs_copula_data","title":"Exploratory pairs plot for copula data — pairs_copula_data","text":"function provides pair plots copula data. shows bivariate contour plots lower panel, scatter plots correlations upper panel histograms diagonal panel.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pairs_copula_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exploratory pairs plot for copula data — pairs_copula_data","text":"","code":"pairs_copula_data(data, main = \"\", ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pairs_copula_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exploratory pairs plot for copula data — pairs_copula_data","text":"data data (must lie unit hypercube). main overall title plot. ... parameters passed pairs.default(), contour.bicop(), points.default(), hist.default(), bicop().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pairs_copula_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exploratory pairs plot for copula data — pairs_copula_data","text":"","code":"u <- replicate(3, runif(100)) pairs_copula_data(u)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/par_to_ktau.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion between Kendall's tau and parameters — par_to_ktau","title":"Conversion between Kendall's tau and parameters — par_to_ktau","text":"Conversion Kendall's tau parameters","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/par_to_ktau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion between Kendall's tau and parameters — par_to_ktau","text":"","code":"par_to_ktau(family, rotation, parameters)  ktau_to_par(family, tau)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/par_to_ktau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion between Kendall's tau and parameters — par_to_ktau","text":"family copula family (see bicop_dist()) bicop_dist object. rotation rotation copula, one 0, 90, 180, 270. parameters vector matrix copula parameters, used family bicop_dist object. tau Kendall's \\(\\tau\\).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/par_to_ktau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion between Kendall's tau and parameters — par_to_ktau","text":"","code":"# the following are equivalent par_to_ktau(bicop_dist(\"clayton\", 0, 3)) #> [1] 0.6 par_to_ktau(\"clayton\", 0, 3) #> [1] 0.6  ktau_to_par(\"clayton\", 0.5) #>      [,1] #> [1,]    2 ktau_to_par(bicop_dist(\"clayton\", 0, 3), 0.5) #>      [,1] #> [1,]    2"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.bicop_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting tools for bicop_dist and bicop objects — plot.bicop_dist","title":"Plotting tools for bicop_dist and bicop objects — plot.bicop_dist","text":"several options plotting bicop_dist objects. density bivariate copula density can visualized surface/perspective contour plot. Optionally, density can coupled standard normal margins (default contour plots).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.bicop_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting tools for bicop_dist and bicop objects — plot.bicop_dist","text":"","code":"# S3 method for class 'bicop_dist' plot(x, type = \"surface\", margins, size, ...)  # S3 method for class 'bicop' plot(x, type = \"surface\", margins, size, ...)  # S3 method for class 'bicop_dist' contour(x, margins = \"norm\", size = 100L, ...)  # S3 method for class 'bicop' contour(x, margins = \"norm\", size = 100L, ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.bicop_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting tools for bicop_dist and bicop objects — plot.bicop_dist","text":"x bicop_dist object. type plot type; either \"surface\" \"contour\". margins options : \"unif\" original copula density, \"norm\" transformed density standard normal margins, \"exp\" standard exponential margins,  \"flexp\" flipped exponential margins. Default \"norm\" type =   \"contour\", \"unif\" type = \"surface\". size integer; plot based values size x size grid, default 100. ... optional arguments passed graphics::contour() lattice::wireframe().","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.bicop_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting tools for bicop_dist and bicop objects — plot.bicop_dist","text":"","code":"## construct bicop_dist object for a student t copula obj <- bicop_dist(family = \"t\", rotation = 0, parameters = c(0.7, 4))  ## plots plot(obj) # surface plot of copula density  contour(obj) # contour plot with standard normal margins  contour(obj, margins = \"unif\") # contour plot of copula density"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.rvine_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting R-vine structures — plot.rvine_structure","title":"Plotting R-vine structures — plot.rvine_structure","text":"Plot one trees R-vine structure.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.rvine_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting R-vine structures — plot.rvine_structure","text":"","code":"# S3 method for class 'rvine_structure' plot(x, ...)  # S3 method for class 'rvine_matrix' plot(x, ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.rvine_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting R-vine structures — plot.rvine_structure","text":"x rvine_structure rvine_matrix object. ... passed plot.vinecop_dist().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.rvine_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting R-vine structures — plot.rvine_structure","text":"","code":"plot(cvine_structure(1:5)) #> Error in plot.vinecop_dist(vinecop_dist(pcs, x), ...): The 'ggraph' package must be installed to plot. plot(rvine_structure_sim(5)) #> Error in plot.vinecop_dist(vinecop_dist(pcs, x), ...): The 'ggraph' package must be installed to plot. mat <- rbind(c(1, 1, 1), c(2, 2, 0), c(3, 0, 0)) plot(rvine_matrix(mat)) #> Error in plot.vinecop_dist(vinecop_dist(pcs, x), ...): The 'ggraph' package must be installed to plot. plot(rvine_matrix_sim(5)) #> Error in plot.vinecop_dist(vinecop_dist(pcs, x), ...): The 'ggraph' package must be installed to plot."},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.vinecop_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting vinecop_dist and vinecop objects. — plot.vinecop_dist","title":"Plotting vinecop_dist and vinecop objects. — plot.vinecop_dist","text":"two plotting generics vinecop_dist objects. plot.vinecop_dist plots one trees given R-vine copula model. Edges can labeled information corresponding pair-copula. contour.vinecop_dist produces matrix contour plots (using plot.bicop).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.vinecop_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting vinecop_dist and vinecop objects. — plot.vinecop_dist","text":"","code":"# S3 method for class 'vinecop_dist' plot(x, tree = 1, var_names = \"ignore\", edge_labels = NULL, ...)  # S3 method for class 'vinecop' plot(x, tree = 1, var_names = \"ignore\", edge_labels = NULL, ...)  # S3 method for class 'vinecop_dist' contour(x, tree = \"ALL\", cex.nums = 1, ...)  # S3 method for class 'vinecop' contour(x, tree = \"ALL\", cex.nums = 1, ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.vinecop_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting vinecop_dist and vinecop objects. — plot.vinecop_dist","text":"x vinecop_dist object. tree \"\" integer vector; specifies trees plotted. var_names integer; specifies make use variable names: `\"ignore\"“ = variable names ignored, `\"use\"“ = variable names used annotate vertices, `\"legend\"“ = uses numbers plot adds legend variable names, `\"hide\"“ = numbers names, just node. edge_labels character; options : \"family\" = pair-copula family (see [bicop_dist()]), `\"tau\"“ = pair-copula Kendall's tau `\"family_tau\"“ = pair-copula family Kendall's tau, `\"pair\"“ = name involved variables. ... Unused plot passed contour.bicop contour. cex.nums numeric; expansion factor font numbers.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.vinecop_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting vinecop_dist and vinecop objects. — plot.vinecop_dist","text":"want contour boxes perfect squares, plot height 1.25/length(tree)*(d - min(tree)) times plot width. plot() method returns object (among things) contains igraph representation graph; see Examples.","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.vinecop_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting vinecop_dist and vinecop objects. — plot.vinecop_dist","text":"Thomas Nagler, Thibault Vatter","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/plot.vinecop_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting vinecop_dist and vinecop objects. — plot.vinecop_dist","text":"","code":"# set up vine copula model u <- matrix(runif(20 * 10), 20, 10) vc <- vinecop(u, family = \"indep\")  # plot plot(vc, tree = c(1, 2)) #> Error in plot.vinecop(vc, tree = c(1, 2)): The 'ggraph' package must be installed to plot. plot(vc, edge_labels = \"pair\") #> Error in plot.vinecop(vc, edge_labels = \"pair\"): The 'ggraph' package must be installed to plot.  # extract igraph representation plt <- plot(vc, edge_labels = \"family_tau\") #> Error in plot.vinecop(vc, edge_labels = \"family_tau\"): The 'ggraph' package must be installed to plot. igr_obj <- get(\"g\", plt$plot_env)[[1]] #> Error: object 'plt' not found igr_obj  # print object #> Error: object 'igr_obj' not found igraph::E(igr_obj)$name  # extract edge labels #> Error in loadNamespace(x): there is no package called ‘igraph’  # set up another vine copula model pcs <- lapply(1:3, function(j) # pair-copulas in tree j   lapply(runif(4 - j), function(cor) bicop_dist(\"gaussian\", 0, cor))) mat <- rvine_matrix_sim(4) vc <- vinecop_dist(pcs, mat)  # contour plot contour(vc)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_bicop.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","title":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","text":"Predictions density, distribution function, h-functions (inverses) bivariate copula model.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_bicop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","text":"","code":"# S3 method for class 'bicop_dist' predict(object, newdata, what = \"pdf\", ...)  # S3 method for class 'bicop' fitted(object, what = \"pdf\", ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_bicop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","text":"object bicop object. newdata points fit shall evaluated. predict, one \"pdf\", \"cdf\", \"hfunc1\", \"hfunc2\", \"hinv1\", \"hinv2\". ... unused.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_bicop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","text":"fitted() logLik() return values similar dbicop(), pbicop(), hbicop().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_bicop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","text":"fitted() can called model fit keep_data = TRUE option.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_bicop.html","id":"discrete-variables","dir":"Reference","previous_headings":"","what":"Discrete variables","title":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","text":"least one variable discrete, two columns required newdata: first \\(n \\times 2\\) block contains realizations \\(F_{X_1}(x_1), F_{X_2}(x_2)\\). second \\(n \\times 2\\) block contains realizations \\(F_{X_1}(x_1^-), F_{X_2}(x_2^-)\\). minus indicates left-sided limit cdf. , e.g., integer-valued variable, holds \\(F_{X_1}(x_1^-) = F_{X_1}(x_1 - 1)\\). continuous variables left limit cdf coincide. Respective columns can omitted second block.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_bicop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions and fitted values for a bivariate copula model — bicop_predict_and_fitted","text":"","code":"# Simulate and fit a bivariate copula model u <- rbicop(500, \"gauss\", 0, 0.5) fit <- bicop(u, family = \"par\", keep_data = TRUE)  # Predictions all.equal(predict(fit, u, \"hfunc1\"), fitted(fit, \"hfunc1\"),           check.environment = FALSE) #> [1] TRUE"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vine.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions and fitted values for a vine copula model — vine_predict_and_fitted","title":"Predictions and fitted values for a vine copula model — vine_predict_and_fitted","text":"Predictions density distribution function vine copula model.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions and fitted values for a vine copula model — vine_predict_and_fitted","text":"","code":"# S3 method for class 'vine' predict(object, newdata, what = \"pdf\", n_mc = 10^4, cores = 1, ...)  # S3 method for class 'vine' fitted(object, what = \"pdf\", n_mc = 10^4, cores = 1, ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions and fitted values for a vine copula model — vine_predict_and_fitted","text":"object vine object. newdata points fit shall evaluated. predict, either \"pdf\" \"cdf\". n_mc number samples used quasi Monte Carlo integration = \"cdf\". cores number cores use; larger one, computations done parallel cores batches . ... unused.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions and fitted values for a vine copula model — vine_predict_and_fitted","text":"fitted() predict() return values similar dvine() pvine().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions and fitted values for a vine copula model — vine_predict_and_fitted","text":"","code":"x <- sapply(1:5, function(i) rnorm(50)) fit <- vine(x, copula_controls = list(family_set = \"par\"), keep_data = TRUE) all.equal(predict(fit, x), fitted(fit), check.environment = FALSE) #> [1] TRUE"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vinecop.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","title":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","text":"Predictions density distribution function vine copula model.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vinecop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","text":"","code":"# S3 method for class 'vinecop' predict(object, newdata, what = \"pdf\", n_mc = 10^4, cores = 1, ...)  # S3 method for class 'vinecop' fitted(object, what = \"pdf\", n_mc = 10^4, cores = 1, ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vinecop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","text":"object vinecop object. newdata points fit shall evaluated. predict, either \"pdf\" \"cdf\". n_mc number samples used quasi Monte Carlo integration = \"cdf\". cores number cores use; larger one, computations done parallel cores batches. ... unused.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vinecop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","text":"fitted() predict() return values similar dvinecop() pvinecop().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vinecop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","text":"fitted() can called model fit keep_data = TRUE option.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vinecop.html","id":"discrete-variables","dir":"Reference","previous_headings":"","what":"Discrete variables","title":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","text":"least one variable discrete, two types \"observations\" required newdata: first \\(n \\; x \\; d\\) block contains realizations \\(F_{X_j}(X_j)\\). second \\(n \\; x \\; d\\) block contains realizations \\(F_{X_j}(X_j^-)\\). minus indicates left-sided limit cdf. , e.g., integer-valued variable, holds \\(F_{X_j}(X_j^-) = F_{X_j}(X_j - 1)\\). continuous variables left limit cdf coincide. Respective columns can omitted second block.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/predict_vinecop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions and fitted values for a vine copula model — vinecop_predict_and_fitted","text":"","code":"u <- sapply(1:5, function(i) runif(50)) fit <- vinecop(u, family = \"par\", keep_data = TRUE) all.equal(predict(fit, u), fitted(fit), check.environment = FALSE) #> [1] TRUE"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pseudo_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Pseudo-Observations — pseudo_obs","title":"Pseudo-Observations — pseudo_obs","text":"Compute pseudo-observations given data matrix.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pseudo_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pseudo-Observations — pseudo_obs","text":"","code":"pseudo_obs(x, ties_method = \"average\", lower_tail = TRUE)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pseudo_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pseudo-Observations — pseudo_obs","text":"x vector matrix random variates converted (column wise) pseudo-observations. ties_method similar ties.method rank() (\"average\", \"first\" \"random\" currently available). lower_tail logical , `FALSE“, returns pseudo-observations applying empirical marginal survival functions.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pseudo_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pseudo-Observations — pseudo_obs","text":"vector matrix dimension input containing pseudo-observations.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pseudo_obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pseudo-Observations — pseudo_obs","text":"Given n realizations \\(x_i=(x_{i1}, \\ldots,x_{id})\\), \\(\\\\left\\lbrace 1, \\ldots,n \\right\\rbrace \\) random vector X, pseudo-observations defined via \\(u_{ij}=r_{ij}/(n+1)\\) \\(\\\\left\\lbrace 1, \\ldots,n \\right\\rbrace\\) \\(j \\\\left\\lbrace 1, \\ldots,d \\right\\rbrace \\), \\(r_{ij}\\) denotes rank \\(x_{ij}\\) among \\(x_{kj}\\), \\(k \\\\left\\lbrace 1, \\ldots,n \\right\\rbrace \\). pseudo-observations can thus also computed component-wise applying empirical distribution functions data scaling result \\(n/(n+1)\\). asymptotically negligible scaling factor used force variates fall inside open unit hypercube, example, avoid problems density evaluation boundaries. lower_tail = FALSE, pseudo_obs() simply returns 1 - pseudo_obs().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/pseudo_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pseudo-Observations — pseudo_obs","text":"","code":"# pseudo-observations for a vector pseudo_obs(rnorm(10)) #>  [1] 0.81818182 0.63636364 0.27272727 0.72727273 0.45454545 0.18181818 #>  [7] 0.90909091 0.09090909 0.36363636 0.54545455  # pseudo-observations for a matrix pseudo_obs(cbind(rnorm(10), rnorm(10))) #>             [,1]       [,2] #>  [1,] 0.09090909 0.72727273 #>  [2,] 0.90909091 0.36363636 #>  [3,] 0.54545455 0.54545455 #>  [4,] 0.63636364 0.63636364 #>  [5,] 0.27272727 0.90909091 #>  [6,] 0.36363636 0.18181818 #>  [7,] 0.18181818 0.09090909 #>  [8,] 0.81818182 0.45454545 #>  [9,] 0.45454545 0.81818182 #> [10,] 0.72727273 0.27272727"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rosenblatt.html","id":null,"dir":"Reference","previous_headings":"","what":"(Inverse) Rosenblatt transform — rosenblatt","title":"(Inverse) Rosenblatt transform — rosenblatt","text":"Rosenblatt transform takes data generated model turns independent uniform variates, inverse Rosenblatt transform computes conditional quantiles can used simulate stochastic model, see Details.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rosenblatt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Inverse) Rosenblatt transform — rosenblatt","text":"","code":"rosenblatt(x, model, cores = 1, randomize_discrete = TRUE)  inverse_rosenblatt(u, model, cores = 1)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rosenblatt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Inverse) Rosenblatt transform — rosenblatt","text":"x matrix evaluation points; must \\((0, 1)^d\\) copula models. model model object; classes currently supported bicop_dist(), vinecop_dist(), vine_dist(). cores >1, computation parallelized cores batches (rows u). randomize_discrete Whether randomize transform discrete variables; see Details. u matrix evaluation points; must \\((0, 1)^d\\).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rosenblatt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Inverse) Rosenblatt transform — rosenblatt","text":"Rosenblatt transform (Rosenblatt, 1952) \\(U = T(V)\\) random vector \\(V = (V_1,\\ldots,V_d) ~ F\\) defined $$   U_1= F(V_1), U_{2} = F(V_{2}|V_1), \\ldots, U_d =F(V_d|V_1,\\ldots,V_{d-1}), $$ \\(F(v_k|v_1,\\ldots,v_{k-1})\\) conditional distribution \\(V_k\\) given \\(V_1 \\ldots, V_{k-1}, k = 2,\\ldots,d\\). vector \\(U  = (U_1, \\dots, U_d)\\) contains independent standard uniform variables. inverse operation $$   V_1 = F^{-1}(U_1), V_{2} = F^{-1}(U_2|U_1), \\ldots,   V_d =F^{-1}(U_d|U_1,\\ldots,U_{d-1}), $$ can used simulate distribution. copula \\(F\\), \\(U\\) vector independent random variables, \\(V = T^{-1}(U)\\) distribution \\(F\\). formulas assume vine copula model order \\(d, \\dots, 1\\). generally, rosenblatt() returns variables $$   U_{M[d + 1- j, j]}= F(V_{M[d - j + 1, j]} | V_{M[d - j, j]}, \\dots, V_{M[1, j]}), $$ \\(M\\) structure matrix. Similarly, inverse_rosenblatt() returns $$   V_{M[d + 1- j, j]}= F^{-1}(U_{M[d - j + 1, j]} | U_{M[d - j, j]}, \\dots, U_{M[1, j]}). $$ variables atoms, Brockwell (10.1016/j.spl.2007.02.008) proposed simple randomization scheme ensure output still independent uniform model correct. transformation reads $$ U_{M[d - j, j]}= W_{d - j} F(V_{M[d - j, j]} | V_{M[d - j - 1, j - 1]}, \\dots, V_{M[0, 0]}) + (1 - W_{d - j}) F^-(V_{M[d - j, j]} | V_{M[d - j - 1, j - 1]}, \\dots, V_{M[0, 0]}), $$ \\(F^-\\) left limit conditional cdf \\(W_1, \\dots, W_d\\) independent standard uniform random variables. used default. interested conditional probabilities $$  F(V_{M[d - j, j]} | V_{M[d - j - 1, j - 1]}, \\dots, V_{M[0, 0]}), $$ set randomize_discrete = FALSE.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rosenblatt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Inverse) Rosenblatt transform — rosenblatt","text":"","code":"# simulate data with some dependence x <- replicate(3, rnorm(200)) x[, 2:3] <- x[, 2:3] + x[, 1] pairs(x)   # estimate a vine distribution model fit <- vine(x, copula_controls = list(family_set = \"par\"))  # transform into independent uniforms u <- rosenblatt(x, fit) pairs(u)   # inversion pairs(inverse_rosenblatt(u, fit))   # works similarly for vinecop models vc <- fit$copula rosenblatt(pseudo_obs(x), vc) #>                 V1         V2          V3 #>   [1,] 0.830481587 0.43979351 0.890547264 #>   [2,] 0.537516232 0.30021550 0.412935323 #>   [3,] 0.044593319 0.78248071 0.447761194 #>   [4,] 0.618584524 0.40098854 0.815920398 #>   [5,] 0.602277704 0.83488704 0.756218905 #>   [6,] 0.939472981 0.92899249 0.631840796 #>   [7,] 0.660034395 0.39016889 0.975124378 #>   [8,] 0.662103587 0.60066679 0.402985075 #>   [9,] 0.132073192 0.54321512 0.273631841 #>  [10,] 0.967372809 0.12086653 0.572139303 #>  [11,] 0.751370914 0.88727138 0.004975124 #>  [12,] 0.619770380 0.27334545 0.323383085 #>  [13,] 0.112219721 0.82606863 0.074626866 #>  [14,] 0.339463529 0.14348764 0.830845771 #>  [15,] 0.095389222 0.96766627 0.218905473 #>  [16,] 0.690535935 0.86117846 0.368159204 #>  [17,] 0.295657552 0.46392694 0.940298507 #>  [18,] 0.896734561 0.64047103 0.656716418 #>  [19,] 0.336401993 0.45544033 0.985074627 #>  [20,] 0.503480143 0.56540104 0.034825871 #>  [21,] 0.001019291 0.84925625 0.184079602 #>  [22,] 0.324262386 0.12781189 0.820895522 #>  [23,] 0.883340820 0.24182485 0.636815920 #>  [24,] 0.224989578 0.72354979 0.477611940 #>  [25,] 0.314080610 0.49046341 0.542288557 #>  [26,] 0.116230810 0.72549321 0.805970149 #>  [27,] 0.351893794 0.50433248 0.791044776 #>  [28,] 0.333348757 0.07567987 0.099502488 #>  [29,] 0.287609947 0.74039690 0.915422886 #>  [30,] 0.007589545 0.60793987 0.139303483 #>  [31,] 0.921352963 0.08525318 0.213930348 #>  [32,] 0.319994212 0.20918588 0.472636816 #>  [33,] 0.150909123 0.15776453 0.746268657 #>  [34,] 0.422157205 0.46788371 0.845771144 #>  [35,] 0.761161774 0.54180050 0.298507463 #>  [36,] 0.799107917 0.30028021 0.462686567 #>  [37,] 0.476287045 0.40596196 0.691542289 #>  [38,] 0.620952318 0.81574840 0.646766169 #>  [39,] 0.993632890 0.10137867 0.597014925 #>  [40,] 0.332266414 0.72876883 0.880597015 #>  [41,] 0.559620534 0.05527248 0.577114428 #>  [42,] 0.427381931 0.14489078 0.606965174 #>  [43,] 0.843048641 0.97550606 0.432835821 #>  [44,] 0.286577173 0.02817389 0.895522388 #>  [45,] 0.800807497 0.26617908 0.119402985 #>  [46,] 0.572887156 0.01939254 0.855721393 #>  [47,] 0.098297814 0.30225299 0.601990050 #>  [48,] 0.368977555 0.02382475 0.159203980 #>  [49,] 0.708521187 0.13868920 0.711442786 #>  [50,] 0.914565661 0.33986175 0.084577114 #>  [51,] 0.758829780 0.25432027 0.268656716 #>  [52,] 0.210872153 0.86715046 0.641791045 #>  [53,] 0.665514014 0.43324957 0.875621891 #>  [54,] 0.127177797 0.05921286 0.681592040 #>  [55,] 0.569458222 0.05342952 0.905472637 #>  [56,] 0.471383178 0.03932244 0.706467662 #>  [57,] 0.461491280 0.36774017 0.094527363 #>  [58,] 0.110079976 0.04971222 0.353233831 #>  [59,] 0.222843516 0.33971397 0.029850746 #>  [60,] 0.687133772 0.43670728 0.437810945 #>  [61,] 0.892528019 0.17486607 0.497512438 #>  [62,] 0.577827241 0.68906621 0.278606965 #>  [63,] 0.516820981 0.15534359 0.990049751 #>  [64,] 0.803366661 0.39393168 0.965174129 #>  [65,] 0.604858234 0.72078354 0.716417910 #>  [66,] 0.497079733 0.94454404 0.308457711 #>  [67,] 0.099332256 0.20623280 0.532338308 #>  [68,] 0.313948355 0.87242467 0.860696517 #>  [69,] 0.191360049 0.89860918 0.189054726 #>  [70,] 0.213846149 0.29886364 0.626865672 #>  [71,] 0.234996611 0.11715176 0.766169154 #>  [72,] 0.183898971 0.52438532 0.064676617 #>  [73,] 0.321999460 0.22817872 0.238805970 #>  [74,] 0.790425232 0.67197946 0.557213930 #>  [75,] 0.835060634 0.68110936 0.328358209 #>  [76,] 0.666421811 0.49262843 0.467661692 #>  [77,] 0.690221055 0.30151489 0.492537313 #>  [78,] 0.151164154 0.25378443 0.517412935 #>  [79,] 0.217337172 0.72400690 0.303482587 #>  [80,] 0.045003228 0.93559562 0.666666667 #>  [81,] 0.532256995 0.67822696 0.024875622 #>  [82,] 0.649879892 0.39620089 0.258706468 #>  [83,] 0.528692896 0.01977060 0.009950249 #>  [84,] 0.953705796 0.78001959 0.950248756 #>  [85,] 0.899588714 0.78945109 0.850746269 #>  [86,] 0.672154455 0.50391345 0.527363184 #>  [87,] 0.999465539 0.92552429 0.069651741 #>  [88,] 0.216268906 0.68829218 0.263681592 #>  [89,] 0.635264115 0.64084093 0.442786070 #>  [90,] 0.214341645 0.12705131 0.502487562 #>  [91,] 0.912078002 0.12806247 0.721393035 #>  [92,] 0.460480296 0.66911264 0.736318408 #>  [93,] 0.369219188 0.11754563 0.054726368 #>  [94,] 0.320326960 0.51219347 0.288557214 #>  [95,] 0.975868660 0.72486413 0.089552239 #>  [96,] 0.895452101 0.56702616 0.129353234 #>  [97,] 0.839165104 0.29940961 0.253731343 #>  [98,] 0.022796006 0.85271455 0.621890547 #>  [99,] 0.309877844 0.68755056 0.039800995 #> [100,] 0.154138828 0.38418516 0.840796020 #> [101,] 0.946311641 0.17360914 0.203980100 #> [102,] 0.911179649 0.06347573 0.417910448 #> [103,] 0.928440367 0.08098487 0.731343284 #> [104,] 0.325075963 0.59101815 0.507462687 #> [105,] 0.385898614 0.34682714 0.870646766 #> [106,] 0.622219541 0.77613711 0.293532338 #> [107,] 0.049313103 0.92022443 0.781094527 #> [108,] 0.316707629 0.23872032 0.388059701 #> [109,] 0.436528847 0.10858195 0.208955224 #> [110,] 0.858753792 0.78572587 0.348258706 #> [111,] 0.514555115 0.91308092 0.671641791 #> [112,] 0.383236548 0.94559512 0.363184080 #> [113,] 0.261363579 0.59693757 0.393034826 #> [114,] 0.950157334 0.84135976 0.930348259 #> [115,] 0.320297774 0.38055222 0.164179104 #> [116,] 0.139921979 0.43699953 0.582089552 #> [117,] 0.824261766 0.43002304 0.044776119 #> [118,] 0.259280671 0.07898543 0.373134328 #> [119,] 0.802511455 0.10815119 0.522388060 #> [120,] 0.723334121 0.24788667 0.592039801 #> [121,] 0.168088532 0.75193023 0.378109453 #> [122,] 0.835822494 0.50430382 0.407960199 #> [123,] 0.720523836 0.90034032 0.427860697 #> [124,] 0.291356297 0.33443905 0.144278607 #> [125,] 0.781822887 0.68247814 0.796019900 #> [126,] 0.679702226 0.88908725 0.835820896 #> [127,] 0.252356260 0.57799504 0.552238806 #> [128,] 0.268064298 0.44948477 0.358208955 #> [129,] 0.614640776 0.64798521 0.014925373 #> [130,] 0.644425934 0.28448735 0.079601990 #> [131,] 0.151187675 0.61615902 0.980099502 #> [132,] 0.121924183 0.20284644 0.243781095 #> [133,] 0.026277002 0.73128825 0.398009950 #> [134,] 0.611567863 0.88472404 0.800995025 #> [135,] 0.602790317 0.09238793 0.865671642 #> [136,] 0.328610768 0.86273950 0.651741294 #> [137,] 0.730410581 0.22411853 0.945273632 #> [138,] 0.413913064 0.14955650 0.562189055 #> [139,] 0.744743734 0.60844353 0.751243781 #> [140,] 0.423560591 0.33852124 0.810945274 #> [141,] 0.317951611 0.07307936 0.179104478 #> [142,] 0.546060051 0.99157011 0.169154229 #> [143,] 0.061540615 0.06295529 0.059701493 #> [144,] 0.888925591 0.67423478 0.233830846 #> [145,] 0.788060804 0.19071426 0.885572139 #> [146,] 0.369499153 0.23627903 0.104477612 #> [147,] 0.728122692 0.60790436 0.925373134 #> [148,] 0.303497900 0.23175080 0.343283582 #> [149,] 0.822384277 0.95789948 0.194029851 #> [150,] 0.721004257 0.95093246 0.587064677 #> [151,] 0.596994666 0.49740107 0.228855721 #> [152,] 0.926601129 0.38670499 0.109452736 #> [153,] 0.430245406 0.89575652 0.616915423 #> [154,] 0.333113201 0.78426945 0.920398010 #> [155,] 0.927566871 0.58124720 0.114427861 #> [156,] 0.994665956 0.94852048 0.741293532 #> [157,] 0.313790749 0.97926621 0.960199005 #> [158,] 0.332005161 0.91330159 0.910447761 #> [159,] 0.330937115 0.12403329 0.199004975 #> [160,] 0.861523677 0.64018595 0.422885572 #> [161,] 0.272359138 0.92561468 0.487562189 #> [162,] 0.472771692 0.17085771 0.955223881 #> [163,] 0.674376890 0.97162522 0.512437811 #> [164,] 0.270922734 0.83523479 0.567164179 #> [165,] 0.031456819 0.80077737 0.771144279 #> [166,] 0.237413156 0.22386117 0.134328358 #> [167,] 0.918535994 0.74941557 0.761194030 #> [168,] 0.342900977 0.66911882 0.537313433 #> [169,] 0.927153390 0.15244154 0.223880597 #> [170,] 0.632898275 0.85505677 0.900497512 #> [171,] 0.109882666 0.85622685 0.333333333 #> [172,] 0.068325519 0.93823211 0.726368159 #> [173,] 0.069848325 0.83735766 0.661691542 #> [174,] 0.100411286 0.14086801 0.149253731 #> [175,] 0.625952995 0.93119076 0.383084577 #> [176,] 0.103056237 0.35102686 0.776119403 #> [177,] 0.708924735 0.44000894 0.313432836 #> [178,] 0.168827381 0.25381374 0.935323383 #> [179,] 0.037696364 0.65171687 0.825870647 #> [180,] 0.930341310 0.32884446 0.248756219 #> [181,] 0.395141766 0.14070196 0.283582090 #> [182,] 0.245299016 0.29696413 0.019900498 #> [183,] 0.698801240 0.72686556 0.338308458 #> [184,] 0.793500606 0.54638252 0.686567164 #> [185,] 0.025578224 0.08782937 0.676616915 #> [186,] 0.292958220 0.84275705 0.482587065 #> [187,] 0.253935348 0.26263805 0.318407960 #> [188,] 0.480654276 0.85629793 0.049751244 #> [189,] 0.915582927 0.06762914 0.174129353 #> [190,] 0.661215690 0.71651908 0.970149254 #> [191,] 0.826526489 0.36140022 0.696517413 #> [192,] 0.500949996 0.98323718 0.124378109 #> [193,] 0.535308955 0.19836781 0.154228856 #> [194,] 0.806291365 0.67149462 0.995024876 #> [195,] 0.101227476 0.25375003 0.452736318 #> [196,] 0.054736355 0.67985293 0.701492537 #> [197,] 0.449814844 0.22619102 0.547263682 #> [198,] 0.840435312 0.72483164 0.611940299 #> [199,] 0.715438662 0.34104866 0.457711443 #> [200,] 0.880856168 0.45084832 0.786069652"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"R-vine structure — rvine_structure","title":"R-vine structure — rvine_structure","text":"R-vine structures compressed representations encoding tree structure vine, .e. conditioned/conditioning variables edge. functions [cvine_structure()] [dvine_structure()] give simpler way construct C-vines (every tree star) D-vines (every tree path), respectively (see Examples).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R-vine structure — rvine_structure","text":"","code":"rvine_structure(order, struct_array = list(), is_natural_order = FALSE)  cvine_structure(order, trunc_lvl = Inf)  dvine_structure(order, trunc_lvl = Inf)  rvine_matrix(matrix)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R-vine structure — rvine_structure","text":"order vector positive integers. struct_array list vectors positive integers. vectors represent rows r-rvine structure number elements compatible order vector. empty, model 0-truncated. is_natural_order whether struct_array assumed provided natural order already (structure natural order anti- diagonal 1, .., d bottom left top right). trunc_lvl truncation level matrix R-vine matrix, see Details.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R-vine structure — rvine_structure","text":"Either rvine_structure rvine_matrix.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R-vine structure — rvine_structure","text":"R-vine structure essentially lower-triangular matrix/triangular array, notation differs one VineCopula package. example array   encodes following pair-copulas: R-vine structure can converted R-vine matrix using as_rvine_matrix(), encodes model square matrix filled zeros. instance, matrix corresponding structure :   Similarly, R-vine matrix can converted R-vine structure using as_rvine_structure(). Denoting M[, j] array entry row column j (pair-copula index edge e tree t d dimensional vine (M[d + 1 - e, e], M[t, e]; M[t - 1, e], ..., M[1, e]). Less formally, Start counter-diagonal element column e (first conditioned variable). Jump element row t (second conditioned variable). Gather entries column e (conditioning set). Internally, diagonal stored separately -diagonal elements, stored triangular array. instance, -diagonal elements structure stored   structure . reason allows parsimonious representations truncated models. instance, 2-truncated model represented diagonal following truncated triangular array:   valid R-vine structure matrix must satisfy several conditions checked rvine_structure(), rvine_matrix(), coercion methods (see as_rvine_structure() as_rvine_matrix() called: can contain numbers 1 d (additionally zeros R-vine matrices). anti-diagonal must contain numbers 1, ..., d. anti-diagonal entry column must contained column right. entries column must contained columns left. proximity condition must hold: t = 1, ..., d - 2 e = 1, ..., d - t must exist index j > d, (M[t, e], {M[1, e], ..., M[t - 1, e]}) equals either (M[d + 1 - j, j], {M[1, j], ..., M[t - 1, j]}) (M[t - 1, j], {M[d + 1 - j, j], M[1, j], ..., M[t - 2, j]}). Condition 5 already implies conditions 2-4, difficult check hand.","code":"4 4 4 4 3 3 3 2 2 1 4 4 4 4 3 3 3 0 2 2 0 0 1 0 0 0 4 4 4 3 3 2 4 4 4 3 3"},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R-vine structure — rvine_structure","text":"","code":"# R-vine structures can be constructed from the order vector and struct_array rvine_structure(order = 1:4, struct_array = list(   c(4, 4, 4),   c(3, 3),   2 )) #> 4-dimensional R-vine structure ('rvine_structure') #> 4 4 4 4 #> 3 3 3   #> 2 2     #> 1        # R-vine matrices can be constructed from standard matrices mat <- matrix(c(4, 3, 2, 1, 4, 3, 2, 0, 4, 3, 0, 0, 4, 0, 0, 0), 4, 4) rvine_matrix(mat) #> 4-dimensional R-vine matrix ('rvine_matrix') #> 4 4 4 4 #> 3 3 3   #> 2 2     #> 1        # coerce to R-vine structure str(as_rvine_structure(mat)) #> List of 4 #>  $ order       : num [1:4] 1 2 3 4 #>  $ struct_array:List of 3 #>   ..$ : int [1:3] 4 4 4 #>   ..$ : int [1:2] 3 3 #>   ..$ : int 2 #>  $ d           : Named num 4 #>   ..- attr(*, \"names\")= chr \"dim\" #>  $ trunc_lvl   : Named num 3 #>   ..- attr(*, \"names\")= chr \"trunc_lvl\" #>  - attr(*, \"class\")= chr [1:2] \"rvine_structure\" \"list\"  # truncate and construct the R-vine matrix mat[3, 1] <- 0 rvine_matrix(mat) #> 4-dimensional R-vine matrix ('rvine_matrix'), 2-truncated #> 4 4 4 4 #> 3 3 3   #>   2     #> 1        # or use directly the R-vine structure constructor rvine_structure(order = 1:4, struct_array = list(   c(4, 4, 4),   c(3, 3) )) #> 4-dimensional R-vine structure ('rvine_structure'), 2-truncated #> 4 4 4 4 #> 3 3 3   #>   2     #> 1        # throws an error mat[3, 1] <- 5 try(rvine_matrix(mat)) #> Error : not a valid R-vine array: the upper left triangle can only contain numbers between 1 and d (number of variables).  # C-vine structure cvine <- cvine_structure(1:5) cvine #> 5-dimensional R-vine structure ('rvine_structure') #> 5 5 5 5 5 #> 4 4 4 4   #> 3 3 3     #> 2 2       #> 1         plot(cvine) #> Error in plot.vinecop_dist(vinecop_dist(pcs, x), ...): The 'ggraph' package must be installed to plot.  # D-vine structure dvine <- dvine_structure(c(1, 4, 2, 3, 5)) dvine #> 5-dimensional R-vine structure ('rvine_structure') #> 4 2 3 5 5 #> 2 3 5 3   #> 3 5 2     #> 5 4       #> 1         plot(dvine) #> Error in plot.vinecop_dist(vinecop_dist(pcs, x), ...): The 'ggraph' package must be installed to plot."},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate R-vine structures — rvine_structure_sim","title":"Simulate R-vine structures — rvine_structure_sim","text":"Simulates uniform distribution R-vine structures d variables. rvine_structure_sim() returns rvine_structure() object, rvine_matrix_sim() rvine_matrix().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate R-vine structures — rvine_structure_sim","text":"","code":"rvine_structure_sim(d, natural_order = FALSE)  rvine_matrix_sim(d, natural_order = FALSE)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate R-vine structures — rvine_structure_sim","text":"d number variables natural_order boolean; whether structures natural order (counter-diagonal 1:d).","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvine_structure_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate R-vine structures — rvine_structure_sim","text":"","code":"rvine_structure_sim(10) #> 10-dimensional R-vine structure ('rvine_structure') #>  8  1  2  6  2  1  2  2  2  2 #>  2  6  1  1  8  2  8  8  8    #>  1  2  8  2  1  8  1  1       #>  5  8  9  8  9  9  9          #>  9  9  6  9  6  6             #>  6 10 10 10 10                #> 10  4  4  4                   #>  4  5  5                      #>  7  7                         #>  3                             rvine_structure_sim(10, natural_order = TRUE)  # counter-diagonal is 1:d #> 10-dimensional R-vine structure ('rvine_structure') #> 10  9 10 10 10 10 10 10 10 10 #>  6 10  8  6  8  8  9  9  9    #>  8  8  9  8  9  9  8  8       #>  9  6  7  9  7  7  7          #>  7  4  6  7  6  6             #>  5  7  5  5  5                #>  4  5  4  4                   #>  3  3  3                      #>  2  2                         #>  1                             rvine_matrix_sim(10) #> 10-dimensional R-vine matrix ('rvine_matrix') #> 10  8  5  5  8  8  8  5  5  5 #>  8  5  8  8  5  5  5  8  8    #>  5  6  6  6  6  6  6  6       #>  6  4 10  4 10 10 10          #>  2 10  2 10  4  4             #>  7  1  4  2  2                #>  4  2  1  1                   #>  1  7  7                      #>  9  9                         #>  3"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvinecopulib.html","id":null,"dir":"Reference","previous_headings":"","what":"High Performance Algorithms for Vine Copula Modeling — rvinecopulib","title":"High Performance Algorithms for Vine Copula Modeling — rvinecopulib","text":"Provides interface 'vinecopulib', C++ library vine copula modeling based 'Boost' 'Eigen'. 'rvinecopulib' package implements core features popular 'VineCopula' package, particular inference algorithms vine copula bivariate copula models. Advantages 'VineCopula' sleeker modern API, improved performances, especially high dimensions, nonparametric multi-parameter families. 'rvinecopulib' package includes 'vinecopulib' header-C++ library (currently version 0.6.2). Thus users need install 'vinecopulib' order use 'rvinecopulib'. Since initial releases, 'vinecopulib' licensed MIT License, 'rvinecopulib' licensed GNU GPL version 3.","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvinecopulib.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"High Performance Algorithms for Vine Copula Modeling — rvinecopulib","text":"Thomas Nagler, Thibault Vatter","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/rvinecopulib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"High Performance Algorithms for Vine Copula Modeling — rvinecopulib","text":"","code":"## bicop_dist objects bicop_dist(\"gaussian\", 0, 0.5) #> Bivariate copula ('bicop_dist'): family = gaussian, rotation = 0, parameters = 0.5, var_types = c,c str(bicop_dist(\"gauss\", 0, 0.5)) #> List of 5 #>  $ family    : chr \"gaussian\" #>  $ rotation  : num 0 #>  $ parameters: num [1, 1] 0.5 #>  $ var_types : chr [1:2] \"c\" \"c\" #>  $ npars     : int 1 #>  - attr(*, \"class\")= chr \"bicop_dist\" bicop <- bicop_dist(\"clayton\", 90, 3)  ## bicop objects u <- rbicop(500, \"gauss\", 0, 0.5) fit1 <- bicop(u, family = \"par\") fit1 #> Bivariate copula fit ('bicop'): family = gaussian, rotation = 0, parameters = 0.47, var_types = c,c  ## vinecop_dist objects ## specify pair-copulas bicop <- bicop_dist(\"bb1\", 90, c(3, 2)) pcs <- list(   list(bicop, bicop), # pair-copulas in first tree   list(bicop) # pair-copulas in second tree ) ## specify R-vine matrix mat <- matrix(c(1, 2, 3, 1, 2, 0, 1, 0, 0), 3, 3) ## build the vinecop_dist object vc <- vinecop_dist(pcs, mat) summary(vc) #> # A data.frame: 3 x 10  #>  tree edge conditioned conditioning var_types family rotation parameters df #>     1    1        3, 1                    c,c    bb1       90       3, 2  2 #>     1    2        2, 1                    c,c    bb1       90       3, 2  2 #>     2    1        3, 2            1       c,c    bb1       90       3, 2  2 #>   tau #>  -0.8 #>  -0.8 #>  -0.8  ## vinecop objects u <- sapply(1:3, function(i) runif(50)) vc <- vinecop(u, family = \"par\") summary(vc) #> # A data.frame: 3 x 11  #>  tree edge conditioned conditioning var_types family rotation parameters df tau #>     1    1        1, 3                    c,c  indep        0             0   0 #>     1    2        2, 3                    c,c  indep        0             0   0 #>     2    1        1, 2            3       c,c  indep        0             0   0 #>  loglik #>       0 #>       0 #>       0  ## vine_dist objects vc <- vine_dist(list(list(distr = \"norm\")), pcs, mat) summary(vc) #> $margins #> # A data.frame: 3 x 2  #>  margin distr #>       1  norm #>       2  norm #>       3  norm #>  #> $copula #> # A data.frame: 3 x 10  #>  tree edge conditioned conditioning var_types family rotation parameters df #>     1    1        3, 1                    c,c    bb1       90       3, 2  2 #>     1    2        2, 1                    c,c    bb1       90       3, 2  2 #>     2    1        3, 2            1       c,c    bb1       90       3, 2  2 #>   tau #>  -0.8 #>  -0.8 #>  -0.8 #>   ## vine objects x <- sapply(1:3, function(i) rnorm(50)) vc <- vine(x, copula_controls = list(family_set = \"par\")) summary(vc) #> $margins #> # A data.frame: 3 x 7  #>  margin name nobs   bw mult loglik d.f. #>       1   V1   50 1.31  1.4    -71  2.7 #>       2   V2   50 0.96  1.4    -71  3.7 #>       3   V3   50 1.07  1.4    -66  4.2 #>  #> $copula #> # A data.frame: 3 x 11  #>  tree edge conditioned conditioning var_types family rotation parameters df tau #>     1    1        2, 1                    c,c  indep        0             0   0 #>     1    2        1, 3                    c,c  indep        0             0   0 #>     2    1        2, 3            1       c,c  indep        0             0   0 #>  loglik #>       0 #>       0 #>       0 #>"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/truncate_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate a vine copula model — truncate_model","title":"Truncate a vine copula model — truncate_model","text":"Extracts truncated sub-vine based truncation level supplied user.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/truncate_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate a vine copula model — truncate_model","text":"","code":"truncate_model(object, ...)  # S3 method for class 'rvine_structure' truncate_model(object, trunc_lvl, ...)  # S3 method for class 'rvine_matrix' truncate_model(object, trunc_lvl, ...)  # S3 method for class 'vinecop_dist' truncate_model(object, trunc_lvl, ...)  # S3 method for class 'vine_dist' truncate_model(object, trunc_lvl, ...)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/truncate_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate a vine copula model — truncate_model","text":"object model object. ... arguments passed specific methods. trunc_lvl tree level vine copula truncated.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/truncate_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate a vine copula model — truncate_model","text":"vine model d dimensional random vector contains d-1 nested trees, function extracts sub-model based given truncation level. instance, truncate_model(object, 1) results 1-truncated vine (.e., vine single tree). Similarly truncate_model(object, 2) results 2-truncated vine (.e., vine two trees). Note truncate_model(truncate_model(object, 1), 2) returns 1-truncated vine.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/truncate_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate a vine copula model — truncate_model","text":"","code":"# specify pair-copulas bicop <- bicop_dist(\"bb1\", 90, c(3, 2)) pcs <- list(   list(bicop, bicop), # pair-copulas in first tree   list(bicop) # pair-copulas in second tree )  # specify R-vine matrix mat <- matrix(c(1, 2, 3, 1, 2, 0, 1, 0, 0), 3, 3)  # set up vine structure structure <- as_rvine_structure(mat)  # truncate the model truncate_model(structure, 1) #> 3-dimensional R-vine structure ('rvine_structure'), 1-truncated #> 1 1 1 #>   2   #> 3      # set up vine copula model vc <- vinecop_dist(pcs, mat)  # truncate the model truncate_model(vc, 1) #> 3-dimensional vine copula model ('vinecop_dist'), 1-truncated"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine.html","id":null,"dir":"Reference","previous_headings":"","what":"Vine copula models — vine","title":"Vine copula models — vine","text":"Automated fitting creation custom vine copula models","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vine copula models — vine","text":"","code":"vine(   data,   margins_controls = list(mult = NULL, xmin = NaN, xmax = NaN, bw = NA, deg = 2),   copula_controls = list(family_set = \"all\", structure = NA, par_method = \"mle\",     nonpar_method = \"constant\", mult = 1, selcrit = \"aic\", psi0 = 0.9, presel = TRUE,     allow_rotations = TRUE, trunc_lvl = Inf, tree_crit = \"tau\", threshold = 0, keep_data     = FALSE, show_trace = FALSE, cores = 1, tree_algorithm = \"mst_prim\"),   weights = numeric(),   keep_data = FALSE,   cores = 1 )  vine_dist(margins, pair_copulas, structure)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vine copula models — vine","text":"data matrix data.frame. Discrete variables declared ordered(). margins_controls list arguments passed kde1d::kde1d(). Currently, can mult numeric vector length one d; bandwidths marginal kernel density estimation multiplied mult. Defaults log(1 + d) d number variables applying rvinecopulib:::expand_factors(). xmin numeric vector length d; see kde1d::kde1d(). xmax numeric vector length d; see kde1d::kde1d(). type numeric vector length d; see kde1d::kde1d(). bw numeric vector length d; see kde1d::kde1d(). deg numeric vector length one d; kde1d::kde1d(). copula_controls list arguments passed vinecop(). weights optional vector weights observation. keep_data whether original data stored; want store pseudo-observations used fitting copula, use copula_controls argument. cores number cores use parallel computations. margins list element containing specification marginal stats::Distributions. marginal specification list containing least distribution family (\"distr\") optionally parameters, e.g. list(list(distr = \"norm\"), list(distr = \"norm\", mu = 1), list(distr = \"beta\", shape1 = 1, shape2 = 1)). Note parameters default values provided. Furthermore, margins length one, recycled every component. pair_copulas nested list 'bicop_dist' objects, pair_copulas[[t]][[e]] corresponds pair-copula edge e tree t. structure rvine_structure object, namely compressed representation vine structure, object can coerced one (see rvine_structure() as_rvine_structure()). dimension must length(pair_copulas[[1]]) + 1.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vine copula models — vine","text":"Objects inheriting vine_dist vine_dist(), vine vine_dist vine(). Objects vine_dist class lists containing: margins, list marginals (see ). copula, object class vinecop_dist, see vinecop_dist(). objects vine class, copula also object class vine, see vinecop(). Additionally, objects vine class contain: margins_controls, list set fit controls passed kde1d::kde1d() estimating margins. copula_controls, list set fit controls passed vinecop() estimating copula. data (optionally, keep_data = TRUE used), dataset passed vine(). nobs, integer containing number observations used fit model. Concerning margins: objects created vine_dist(), simply corresponds margins argument. objects created vine(), list objects class kde1d, see kde1d::kde1d().","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vine copula models — vine","text":"vine_dist() creates vine copula specifying margins, nested list bicop_dist objects quadratic structure matrix. vine() provides automated fitting vine copula models. margins_controls list parameters kde1d::kde1d() (except x). copula_controls list parameters vinecop() (except data).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vine copula models — vine","text":"","code":"# specify pair-copulas bicop <- bicop_dist(\"bb1\", 90, c(3, 2)) pcs <- list(   list(bicop, bicop), # pair-copulas in first tree   list(bicop) # pair-copulas in second tree )  # specify R-vine matrix mat <- matrix(c(1, 2, 3, 1, 2, 0, 1, 0, 0), 3, 3)  # set up vine copula model with Gaussian margins vc <- vine_dist(list(list(distr = \"norm\")), pcs, mat)  # show model summary(vc) #> $margins #> # A data.frame: 3 x 2  #>  margin distr #>       1  norm #>       2  norm #>       3  norm #>  #> $copula #> # A data.frame: 3 x 10  #>  tree edge conditioned conditioning var_types family rotation parameters df #>     1    1        3, 1                    c,c    bb1       90       3, 2  2 #>     1    2        2, 1                    c,c    bb1       90       3, 2  2 #>     2    1        3, 2            1       c,c    bb1       90       3, 2  2 #>   tau #>  -0.8 #>  -0.8 #>  -0.8 #>   # simulate some data x <- rvine(50, vc)  # estimate a vine copula model fit <- vine(x, copula_controls = list(family_set = \"par\")) summary(fit) #> $margins #> # A data.frame: 3 x 7  #>  margin name nobs   bw mult loglik d.f. #>       1   V1   50 0.74  1.4    -62  3.9 #>       2   V2   50 0.67  1.4    -61  2.7 #>       3   V3   50 0.61  1.4    -64  3.2 #>  #> $copula #> # A data.frame: 3 x 11  #>  tree edge conditioned conditioning var_types   family rotation #>     1    1        2, 1                    c,c     tawn      270 #>     1    2        1, 3                    c,c gaussian        0 #>     2    1        2, 3            1       c,c     tawn       90 #>        parameters df   tau loglik #>  0.85, 0.93, 6.64  3 -0.70     51 #>             -0.93  1 -0.76     49 #>  0.71, 1.00, 4.54  3 -0.59     36 #>   ## model for discrete data x <- as.data.frame(x) x[, 1] <- ordered(round(x[, 1]), levels = seq.int(-5, 5)) fit_disc <- vine(x, copula_controls = list(family_set = \"par\")) summary(fit_disc) #> $margins #> # A data.frame: 3 x 7  #>  margin name nobs   bw mult loglik d.f. #>       1   V1   50 0.98  1.4    -85  6.6 #>       2   V2   50 0.67  1.4    -61  2.7 #>       3   V3   50 0.61  1.4    -64  3.2 #>  #> $copula #> # A data.frame: 3 x 11  #>  tree edge conditioned conditioning var_types family rotation    parameters df #>     1    1        2, 1                    c,d    bb7      270      1.0, 2.9  2 #>     1    2        1, 3                    d,c    bb8      270    3.87, 0.94  2 #>     2    1        2, 3            1       c,c   tawn        0 0.7, 0.3, 3.4  3 #>    tau loglik #>  -0.60   27.2 #>  -0.56   20.4 #>   0.23    6.6 #>"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Vine based distributions — vine_distributions","title":"Vine based distributions — vine_distributions","text":"Density, distribution function random generation vine based distribution.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vine based distributions — vine_distributions","text":"","code":"dvine(x, vine, cores = 1)  pvine(x, vine, n_mc = 10^4, cores = 1)  rvine(n, vine, qrng = FALSE, cores = 1)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vine based distributions — vine_distributions","text":"x evaluation points, either length d vector d-column matrix, d number variables vine. vine object class \"vine_dist\". cores number cores use; larger one, computations done parallel cores batches . n_mc number samples used quasi Monte Carlo integration. n number observations. qrng TRUE, generates quasi-random numbers using multivariate Generalized Halton sequence dimension 300 Generalized Sobol sequence higher dimensions (default qrng = FALSE).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vine based distributions — vine_distributions","text":"dvine() gives density, pvine() gives distribution function, rvine() generates random deviates. length result determined n rvine(), number rows u functions. vine object recycled length result.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vine based distributions — vine_distributions","text":"See vine estimation construction vine models. , density, distribution function random generation vine distributions standard. functions based dvinecop(), pvinecop() rvinecop() vinecop objects, either kde1d::dkde1d(), kde1d::pkde1d() kde1d::qkde1d() estimated vines (.e., output vine()), standard d/p/q-xxx stats::Distributions custom vines (.e., output vine_dist()).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vine_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vine based distributions — vine_distributions","text":"","code":"# specify pair-copulas bicop <- bicop_dist(\"bb1\", 90, c(3, 2)) pcs <- list(   list(bicop, bicop), # pair-copulas in first tree   list(bicop) # pair-copulas in second tree )  # set up vine copula model mat <- rvine_matrix_sim(3) vc <- vine_dist(list(list(distr = \"norm\")), pcs, mat)  # simulate from the model x <- rvine(200, vc) pairs(x)   # evaluate the density and cdf dvine(x[1, ], vc) #> [1] 2.310023 pvine(x[1, ], vc) #> [1] 1e-04"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting vine copula models — vinecop","title":"Fitting vine copula models — vinecop","text":"Automated fitting model selection vine copula models continuous discrete data. Selection structure performed using algorithm Dissmann et al. (2013).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting vine copula models — vinecop","text":"","code":"vinecop(   data,   var_types = rep(\"c\", NCOL(data)),   family_set = \"all\",   structure = NA,   par_method = \"mle\",   nonpar_method = \"constant\",   mult = 1,   selcrit = \"aic\",   weights = numeric(),   psi0 = 0.9,   presel = TRUE,   allow_rotations = TRUE,   trunc_lvl = Inf,   tree_crit = \"tau\",   threshold = 0,   keep_data = FALSE,   vinecop_object = NULL,   show_trace = FALSE,   cores = 1,   tree_algorithm = \"mst_prim\" )"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting vine copula models — vinecop","text":"data matrix data.frame least two columns, containing (pseudo-)observations two variables (copula data approximately uniform margins). columns required discrete models, see Details. var_types variable types, length d vector; e.g., c(\"c\", \"c\") two continuous variables, c(\"c\", \"d\") first variable continuous second discrete. family_set character vector families; see bicop() additional options. structure rvine_structure object, namely compressed representation vine structure, object can coerced one (see rvine_structure() as_rvine_structure()). dimension must length(pair_copulas[[1]]) + 1; structure = NA performs automatic selection based Dissman's algorithm. See Details partial selection structure. par_method estimation method parametric models, either \"mle\" maximum likelihood \"itau\" inversion Kendall's tau (available one-parameter families \"t\". nonpar_method estimation method nonparametric models, either \"constant\" standard transformation estimator, \"linear\"/\"quadratic\" local-likelihood approximations order one/two. mult multiplier smoothing parameters nonparametric families. Values larger 1 make estimate smooth, values less 1 less smooth. selcrit criterion family selection, either \"loglik\", \"aic\", \"bic\", \"mbic\". vinecop() additional option \"mbicv\". weights optional vector weights observation. psi0 prior probability non-independence copula (used selcrit = \"mbic\" selcrit = \"mbicv\"). presel whether family set thinned according symmetry characteristics data. allow_rotations whether allow rotations copula. trunc_lvl truncation level vine copula; Inf means truncation, NA indicates truncation level selected automatically mBICV(). tree_crit criterion tree selection, one \"tau\", \"rho\", \"hoeffd\", \"mcor\", \"joe\" Kendall's \\(\\tau\\), Spearman's \\(\\rho\\), Hoeffding's \\(D\\), maximum correlation, logarithm partial correlation, respectively. threshold thresholded vine copulas; NA indicates threshold selected automatically mBICV(). keep_data whether data stored (necessary using fitted()). vinecop_object vinecop object updated; provided, parameters fit; structure families kept . show_trace logical; whether trace fitting progress printed. cores number cores use; 1, estimation pair copulas within tree done parallel. tree_algorithm algorithm building spanning tree (\"mst_prim\", \"mst_kruskal\", \"random_weighted\", \"random_unweighted\") tree-wise structure selection. \"mst_prim\" \"mst_kruskal\" use Prim's Kruskal's algorithms respectively select maximum spanning tree, maximizing sum edge weights (.e., tree_criterion). \"random_weighted\" \"random_unweighted\" use Wilson's algorithm generate random spanning tree, either probability proportional product edge weights (weighted) uniformly (unweighted).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting vine copula models — vinecop","text":"Objects inheriting vinecop vinecop_dist vinecop(). addition entries provided vinecop_dist(), : threshold, (set estimated) threshold used thresholding vine. data (optionally, keep_data = TRUE used), dataset passed vinecop(). controls, list fit controls passed vinecop(). nobs, number observations used fit model.","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"missing-data","dir":"Reference","previous_headings":"","what":"Missing data","title":"Fitting vine copula models — vinecop","text":"missing data (.e., NA entries), incomplete observations discarded fitting pair-copula. done pair--pair basis maximal available information used.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"discrete-variables","dir":"Reference","previous_headings":"","what":"Discrete variables","title":"Fitting vine copula models — vinecop","text":"dependence measures used select trees (default: Kendall's tau) corrected ties (see wdm::wdm). Let n number observations d number variables. least one variable discrete, two types \"observations\" required data: first n  x  d block contains realizations \\(F_{X_j}(X_j)\\). second n  x  d block contains realizations \\(F_{X_j}(X_j^-)\\). minus indicates left-sided limit cdf. , e.g., integer-valued variable, holds \\(F_{X_j}(X_j^-) = F_{X_j}(X_j - 1)\\). continuous variables left limit cdf coincide. Respective columns can omitted second block.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"structure-selection","dir":"Reference","previous_headings":"","what":"Structure selection","title":"Fitting vine copula models — vinecop","text":"Selection structure performed using algorithm Dissmann, J. F., E. C. Brechmann, C. Czado, D. Kurowicka (2013). Selecting estimating regular vine copulae application financial returns. Computational Statistics & Data Analysis, 59 (1), 52-69. dependence measure used select trees (default: Kendall's tau) corrected ties can changed using tree_criterion argument, can set \"tau\", \"rho\" \"hoeffd\". Prim's (default: \"mst_prim\") Kruskal's ()\"mst_kruskal\") algorithms available tree_algorithm set maximum spanning tree selection algorithm. alternative maximum spanning tree selection use random spanning trees, can selected using controls.tree_algorithm come two flavors, using Wilson's algorithm loop erased random walks: \"random_weighted\"` generates random spanning tree probability proportional product weights (.e., dependence) edges tree. \"random_unweighted\"` generates random spanning tree uniformly spanning trees satisfying proximity condition.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"partial-structure-selection","dir":"Reference","previous_headings":"","what":"Partial structure selection","title":"Fitting vine copula models — vinecop","text":"possible fix vine structure first trees select remaining ones automatically. specify first k trees, supply k-truncated rvine_structure() rvine_matrix(). trees trunc_lvl selected automatically.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting vine copula models — vinecop","text":"Dissmann, J. F., E. C. Brechmann, C. Czado, D. Kurowicka (2013). Selecting estimating regular vine copulae application financial returns. Computational Statistics & Data Analysis, 59 (1), 52-69.","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting vine copula models — vinecop","text":"","code":"## simulate dummy data x <- rnorm(30) * matrix(1, 30, 5) + 0.5 * matrix(rnorm(30 * 5), 30, 5) u <- pseudo_obs(x)  ## fit and select the model structure, family and parameters fit <- vinecop(u) summary(fit) #> # A data.frame: 10 x 11  #>  tree edge conditioned conditioning var_types   family rotation #>     1    1        3, 4                    c,c      bb7      180 #>     1    2        4, 1                    c,c   gumbel        0 #>     1    3        2, 1                    c,c      bb7        0 #>     1    4        1, 5                    c,c   gumbel        0 #>     2    1        3, 1            4       c,c gaussian        0 #>     2    2        4, 2            1       c,c     tawn        0 #>     2    3        2, 5            1       c,c     tawn      180 #>     3    1        3, 2         1, 4       c,c      joe        0 #>     3    2        4, 5         2, 1       c,c    indep        0 #>     4    1        3, 5      2, 1, 4       c,c    indep        0 #>        parameters df  tau loglik #>          2.2, 2.9  2 0.64   18.0 #>               2.2  1 0.55   12.0 #>          2.0, 1.4  2 0.54   11.9 #>               2.1  1 0.52   10.1 #>              0.34  1 0.22    1.8 #>     0.3, 1.0, 4.1  3 0.27    5.5 #>  0.42, 0.30, 7.00  3 0.20    3.0 #>               1.3  1 0.15    1.7 #>                    0 0.00    0.0 #>                    0 0.00    0.0 plot(fit) #> Error in plot.vinecop(fit): The 'ggraph' package must be installed to plot. contour(fit)   ## select by log-likelihood criterion from one-paramter families fit <- vinecop(u, family_set = \"onepar\", selcrit = \"bic\") summary(fit) #> # A data.frame: 10 x 11  #>  tree edge conditioned conditioning var_types   family rotation parameters df #>     1    1        3, 4                    c,c   gumbel        0        2.7  1 #>     1    2        2, 1                    c,c gaussian        0       0.76  1 #>     1    3        4, 1                    c,c   gumbel        0        2.2  1 #>     1    4        1, 5                    c,c   gumbel        0        2.1  1 #>     2    1        3, 1            4       c,c gaussian        0       0.32  1 #>     2    2        2, 4            1       c,c  clayton      180       0.53  1 #>     2    3        4, 5            1       c,c      joe      180        1.3  1 #>     3    1        3, 2         1, 4       c,c  clayton      180       0.43  1 #>     3    2        2, 5         4, 1       c,c gaussian        0       0.12  1 #>     4    1        3, 5      2, 1, 4       c,c gaussian        0      0.086  1 #>    tau loglik #>  0.629  16.37 #>  0.546  10.70 #>  0.548  12.02 #>  0.522  10.10 #>  0.209   1.50 #>  0.209   2.23 #>  0.145   0.77 #>  0.176   1.08 #>  0.076   0.21 #>  0.055   0.12  ## 1-truncated, Gaussian D-vine fit <- vinecop(u, structure = dvine_structure(1:5), family = \"gauss\", trunc_lvl = 1) plot(fit) #> Error in plot.vinecop(fit): The 'ggraph' package must be installed to plot. contour(fit)   ## Partial structure selection with only first tree specified structure <- rvine_structure(order = 1:5, list(rep(5, 4))) structure #> 5-dimensional R-vine structure ('rvine_structure'), 1-truncated #> 5 5 5 5 5 #>       4   #>     3     #>   2       #> 1         fit <- vinecop(u, structure = structure, family = \"gauss\") plot(fit) #> Error in plot.vinecop(fit): The 'ggraph' package must be installed to plot.  ## Model for discrete data x <- qpois(u, 1)  # transform to Poisson margins # we require two types of observations (see Details) u_disc <- cbind(ppois(x, 1), ppois(x - 1, 1)) fit <- vinecop(u_disc, var_types = rep(\"d\", 5))  ## Model for mixed data x <- qpois(u[, 1], 1)  # transform first variable to Poisson margin # we require two types of observations (see Details) u_disc <- cbind(ppois(x, 1), u[, 2:5], ppois(x - 1, 1)) fit <- vinecop(u_disc, var_types = c(\"d\", rep(\"c\", 4)))"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Vine copula models — vinecop_dist","title":"Vine copula models — vinecop_dist","text":"Create custom vine copula models specifying pair-copulas, structure, variable types.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vine copula models — vinecop_dist","text":"","code":"vinecop_dist(pair_copulas, structure, var_types = rep(\"c\", dim(structure)[1]))"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vine copula models — vinecop_dist","text":"pair_copulas nested list 'bicop_dist()' objects, pair_copulas[[t]][[e]] corresponds pair-copula edge e tree t. structure rvine_structure object, namely compressed representation vine structure, object can coerced one (see rvine_structure() as_rvine_structure()). dimension must length(pair_copulas[[1]]) + 1; structure = NA performs automatic selection based Dissman's algorithm. See Details partial selection structure. var_types variable types, length d vector; e.g., c(\"c\", \"c\") two continuous variables, c(\"c\", \"d\") first variable continuous second discrete.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vine copula models — vinecop_dist","text":"Object class vinecop_dist, .e., list containing: pair_copulas, list lists. element pair_copulas corresponds tree, list bicop_dist() objects. structure, compressed representation vine structure, object can coerced one (see rvine_structure() as_rvine_structure()). npars, numeric number (effective) parameters. var_types variable types.","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vine copula models — vinecop_dist","text":"","code":"# specify pair-copulas bicop <- bicop_dist(\"bb1\", 90, c(3, 2)) pcs <- list(   list(bicop, bicop), # pair-copulas in first tree   list(bicop) # pair-copulas in second tree )  # specify R-vine matrix mat <- matrix(c(1, 2, 3, 1, 2, 0, 1, 0, 0), 3, 3)  # set up vine copula model vc <- vinecop_dist(pcs, mat)  # visualization plot(vc) #> Error in plot.vinecop_dist(vc): The 'ggraph' package must be installed to plot. contour(vc)   # simulate from the model pairs(rvinecop(200, vc))"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Vine copula distributions — vinecop_distributions","title":"Vine copula distributions — vinecop_distributions","text":"Density, distribution function random generation vine copula distribution.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vine copula distributions — vinecop_distributions","text":"","code":"dvinecop(u, vinecop, cores = 1)  pvinecop(u, vinecop, n_mc = 10^4, cores = 1)  rvinecop(n, vinecop, qrng = FALSE, cores = 1)"},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vine copula distributions — vinecop_distributions","text":"u matrix evaluation points; must contain least d columns, d number variables vine. columns required discrete models, see Details. vinecop object class \"vinecop_dist\". cores number cores use; larger one, computations done parallel cores batches . n_mc number samples used quasi Monte Carlo integration. n number observations. qrng TRUE, generates quasi-random numbers using multivariate Generalized Halton sequence dimension 300 Generalized Sobol sequence higher dimensions (default qrng = FALSE).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vine copula distributions — vinecop_distributions","text":"dvinecop() gives density, pvinecop() gives distribution function, rvinecop() generates random deviates. length result determined n rvinecop(), number rows u functions. vinecop object recycled length result.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vine copula distributions — vinecop_distributions","text":"See vinecop() estimation construction vine copula models. copula density defined joint density divided marginal densities, irrespective variable types.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_methods.html","id":"discrete-variables","dir":"Reference","previous_headings":"","what":"Discrete variables","title":"Vine copula distributions — vinecop_distributions","text":"least one variable discrete, two types \"observations\" required u: first \\(n \\; x \\; d\\) block contains realizations \\(F_{X_j}(X_j)\\). second \\(n \\; x \\; d\\) block contains realizations \\(F_{X_j}(X_j^-)\\). minus indicates left-sided limit cdf. , e.g., integer-valued variable, holds \\(F_{X_j}(X_j^-) = F_{X_j}(X_j - 1)\\). continuous variables left limit cdf coincide. Respective columns can omitted second block.","code":""},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/reference/vinecop_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vine copula distributions — vinecop_distributions","text":"","code":"## simulate dummy data x <- rnorm(30) * matrix(1, 30, 5) + 0.5 * matrix(rnorm(30 * 5), 30, 5) u <- pseudo_obs(x)  ## fit a model vc <- vinecop(u, family = \"clayton\")  # simulate from the model u <- rvinecop(100, vc) pairs(u)   # evaluate the density and cdf dvinecop(u[1, ], vc) #> [1] 3.45289 pvinecop(u[1, ], vc) #> [1] 0.0131  ## Discrete models vc$var_types <- rep(\"d\", 5)  # convert model to discrete  # with discrete data we need two types of observations (see Details) x <- qpois(u, 1)  # transform to Poisson margins u_disc <- cbind(ppois(x, 1), ppois(x - 1, 1))  dvinecop(u_disc[1:5, ], vc) #> [1]  5.0567049  1.2831834  0.4484042 21.4736633  1.5489102 pvinecop(u_disc[1:5, ], vc) #> [1] 0.1867 0.2017 0.2531 0.1526 0.2835  # simulated data always has uniform margins pairs(rvinecop(200, vc))"},{"path":[]},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"new-features-0-7-3-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rvinecopulib 0.7.3.1.0","text":"Allow random spanning trees alternatives MST-based structure selection using tree_algorithm vine vinecop. Options \"mst_prim\", \"mst_kruskal\", \"random_weighted\" \"random_unweighted\" (#307).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"bug-fixes-0-7-3-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rvinecopulib 0.7.3.1.0","text":"Decouple edge insertion criterion computation fix randomness issues structure selection using multiple threads (#640)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-07210","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.7.2.1.0","title":"rvinecopulib 0.7.2.1.0","text":"CRAN release: 2025-03-24 BUG FIX fix TLL speed issues related FFT (#305).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-07112","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.7.1.1.2","title":"rvinecopulib 0.7.1.1.2","text":"CRAN release: 2025-03-03 BUG FIX Fixes “deprecated-literal-operator” warning clang20.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-07111","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.7.1.1.1","title":"rvinecopulib 0.7.1.1.1","text":"CRAN release: 2025-02-10 BUG FIX fix handling discrete variables vine() models related functions.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-07110","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.7.1.1.0","title":"rvinecopulib 0.7.1.1.0","text":"CRAN release: 2025-01-21 Update following upgrade C++ backend vinecopulib 0.7.1, see https://github.com/vinecopulib/vinecopulib/blob/main/NEWS.md. main changes R end : improved documentation, support zero-inflated variables, added new Tawn copula family, new argument allow_rotations disable rotations copula families, added variable names vinecop summary (#276) fixed handling logistic distribution (#275) fix NA handling vine() control checks (#266) allow bicop_dist() tll (#268)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06311","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.3.1.1","title":"rvinecopulib 0.6.3.1.1","text":"CRAN release: 2023-02-23 add -D_HAS_AUTO_PTR_ETC=0 flag disable deprecated features used boost.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06310","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.3.1.0","title":"rvinecopulib 0.6.3.1.0","text":"CRAN release: 2023-02-20 fix NA handling to_pseudo_obs() (#260) add emp_cdf() tail corrected empirical cdf (#261)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06213-december-3-2022","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.2.1.3 (December 3, 2022)","title":"rvinecopulib 0.6.2.1.3 (December 3, 2022)","text":"CRAN release: 2022-12-06 fix marginal PIT discrete variables (see issue #257, thanks @rplzzz)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06212-october-16-2022","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.2.1.2 (October 16, 2022)","title":"rvinecopulib 0.6.2.1.2 (October 16, 2022)","text":"CRAN release: 2022-10-17 fix warning C++17 attribute extension ‘nodiscard’ (#255)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06211-august-30-2022","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.2.1.1 (August 30, 2022)","title":"rvinecopulib 0.6.2.1.1 (August 30, 2022)","text":"CRAN release: 2022-09-04 replace bitwise operations Boolean variables.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06210-august-26-2022","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.2.1.0 (August 26, 2022)","title":"rvinecopulib 0.6.2.1.0 (August 26, 2022)","text":"CRAN release: 2022-08-26 Release following updates vinecopulib 0.6.2, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . improved documentation (discrete missing dat, Rosenblatt transforms) better parallelization small number edges (#555)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06113-march-17-2022","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.1.1.3 (March 17, 2022)","title":"rvinecopulib 0.6.1.1.3 (March 17, 2022)","text":"CRAN release: 2022-03-18 avoid bitwise operations Boolean variables.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06112-march-14-2022","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.1.1.2 (March 14, 2022)","title":"rvinecopulib 0.6.1.1.2 (March 14, 2022)","text":"CRAN release: 2022-03-14 enforce use recent version RcppThread proper handling linker flags","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06111-october-6-2021","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.1.1.1 (October 6, 2021)","title":"rvinecopulib 0.6.1.1.1 (October 6, 2021)","text":"CRAN release: 2021-10-07","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"bug-fixes-0-6-1-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rvinecopulib 0.6.1.1.1 (October 6, 2021)","text":"remove illegal pragmas json header (#245) allow tree restriction summary functions (#244)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-06110-july-13-2021","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.6.1.1.0 (July 13, 2021)","title":"rvinecopulib 0.6.1.1.0 (July 13, 2021)","text":"Release following updates vinecopulib 0.6.1, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized .","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"bug-fixes-0-6-1-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rvinecopulib 0.6.1.1.0 (July 13, 2021)","text":"improved documentation (#241, #239) use num_threads recursive calls inverse Rosenblatt force TLL nonnegative (#238) fix number parameters TLL","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-05511-december-15-2020","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.5.5.1.1 (December 15, 2020)","title":"rvinecopulib 0.5.5.1.1 (December 15, 2020)","text":"CRAN release: 2021-01-06 Maintenance release following changes .equal() R 4.1.x.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-05510-november-24-2020","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.5.5.1.0 (November 24, 2020)","title":"rvinecopulib 0.5.5.1.0 (November 24, 2020)","text":"CRAN release: 2020-11-23 Release following updates vinecopulib 0.5.5, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized .","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"bug-fixes-0-5-5-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rvinecopulib 0.5.5.1.0 (November 24, 2020)","text":"fix little bug copula selection based mBIC stabilize BB7 copula pdf fix threshold selection (near-)independent data fix vine copula selection 1-dimensional models discrete variables fix user-visible variable types","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-05410-september-30-2020","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.5.4.1.0 (September 30, 2020)","title":"rvinecopulib 0.5.4.1.0 (September 30, 2020)","text":"CRAN release: 2020-10-03 Release following updates vinecopulib 0.5.4, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized .","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"bug-fixes-0-5-4-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rvinecopulib 0.5.4.1.0 (September 30, 2020)","text":"fix uninitialized number parameters TLL family fix Kendall’s tau Frank copula par <= 3 fix dvinecop() discrete variables present (#222)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-05310-august-11-2020","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.5.3.1.0 (August 11, 2020)","title":"rvinecopulib 0.5.3.1.0 (August 11, 2020)","text":"CRAN release: 2020-08-12 Release following updates vinecopulib 0.5.3, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized .","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"new-features-0-5-3-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rvinecopulib 0.5.3.1.0 (August 11, 2020)","text":"allow 1-dimensional models (#216) make AIC default selection criterion (#213)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"bug-fixes-0-5-3-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rvinecopulib 0.5.3.1.0 (August 11, 2020)","text":"catch na ktau_to_par (#214) make Bicop/Vinecop objects indepent copied--objects enforce parameters bounds tau_to_parameters Archimedean families","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-05210-may-7-2020","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.5.2.1.0 (May 7, 2020)","title":"rvinecopulib 0.5.2.1.0 (May 7, 2020)","text":"CRAN release: 2020-05-07 Release following updates vinecopulib 0.5.2, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES single-integer constructors dvine_structure()/cvine_structure(). (#203) add var_names = \"hide\" option plot.vinecop_dist(). (#203) add function plot.rvine_matrix(). (#203) BUG FIXES fix bug (negative) tau parameter conversion Frank family. (#207) fix rare error rvine_structure_sim()/rvine_matrix_sim() safeguard \"tll\" family comonotonic data. stabilize archimedean h-functions near independence.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-05110-november-25-2019","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.5.1.1.0 (November 25, 2019)","title":"rvinecopulib 0.5.1.1.0 (November 25, 2019)","text":"CRAN release: 2019-11-26 Release following updates vinecopulib 0.5.1, see https://github.com/vinecopulib/vinecopulib/releases. BUG FIX fix range bug weighted TLL influence sample size small.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-05010-november-25-2019","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.5.0.1.0 (November 25, 2019)","title":"rvinecopulib 0.5.0.1.0 (November 25, 2019)","text":"CRAN release: 2019-11-25 Release following updates vinecopulib 0.5.0, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES modelling discrete variables bivariate vine copulas. (#195) selection partially specified R-vine structures. (#195) convenience classes dvine_structure()/cvine_structure() D- C-vine structures. (#195) new criterion tree selection: \"joe\" corresponds -log(1-r^2), r pairwise partial correlation. (#195) random sampling R-vine structures. (#197) add weights argument vine(). (#188) parallelized fitting margins vine(). (#198) API BREAK new var_types argument discrete models placed early bicop()/vinecop() due importance. might break old code calling functions unnamed arguments. BUG FIXES IMPROVEMENTS better support 0-truncated structures. (#195) ensure consistency TLL likelihood fit. (#195) fixed order ranks pseudo_obs(.., ties.method = \"first\"). (#195) safer computation multivariate normal cdf. (#195) improved memory efficiency. (#195)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-03110-july-4-2019","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.3.1.1.0 (July 4, 2019)","title":"rvinecopulib 0.3.1.1.0 (July 4, 2019)","text":"CRAN release: 2019-04-19 Release following updates vinecopulib 0.3.2, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES improved extensibility packages including C++-headers vinecopulib (#178) new EDA function pairs_copula_data() (#181). BUG FIXES ensure input output type pseudo_obs() match (#182). fix printing \"tll\" family `summary.vinecop() (#183).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-03110-april-19-2019","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.3.1.1.0 (April 19, 2019)","title":"rvinecopulib 0.3.1.1.0 (April 19, 2019)","text":"CRAN release: 2019-04-19 Release following updates vinecopulib 0.3.1, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES import vinecopulib 0.3.1 (#171) improve documentation (#168, #170) warning message wrong family itau method (#169) refactoring enhanced extensibility class Vinecop (vinecopulib #407) simplify algorithms reversing definition natural order (vinecopulib #387) improve selection truncation level (vinecopulib #373) add truncate methods TriangularArray, RVineStructure Vinecop (vinecopulib #372) BUG FIXES don’t strip debug symbols unconditionally linux (#174)","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-03011-august-22-2018","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.3.0.1.1 (August 22, 2018)","title":"rvinecopulib 0.3.0.1.1 (August 22, 2018)","text":"CRAN release: 2018-08-22 BUG FIXES fix non-portable use log() C++ code (#147). remove parallelized unit test avoid segfault Solaris (#147).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-03010-august-9-2018","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.3.0.1.0 (August 9, 2018)","title":"rvinecopulib 0.3.0.1.0 (August 9, 2018)","text":"CRAN release: 2018-08-09 Release following updates vinecopulib 0.3.0, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES new generic truncate_model() truncated vine structures models (#144). new functions rosenblatt() inverse_rosenblatt() computing (inverse) Rosenblatt transformation (#142). faster algorithms nonparametric copulas based bilinear interpolation. refactor vine structures related algorithms triangular arrays improve efficiency truncated models (#136). new classes rvine_structure rvine_matrix storing vine structure including as_- .-generics (#136). allow generating quasi-random numbers (#126). improved parallelization: faster fitting vine copula models parallelized versions many algorithms including pdf, cdf simulation (#339, #363). allow weights observations (#118). faster compilation using single wrapper file (#124). improved print summary generics (#131). BUG FIXES fix cdf StudentBicop improved numerical stability. fix gcc-8 warning. fix missing variable names class vine.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02810-may-8-2018","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.8.1.0 (May 8, 2018)","title":"rvinecopulib 0.2.8.1.0 (May 8, 2018)","text":"CRAN release: 2018-05-09 Release following updates vinecopulib 0.2.8, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES new vine_dist vine classes data non-uniform margins (#97). new function truncate_model() vinecop_dist vine_dist objects (#95, #97). new convenience functions get_pair_copula(), get_parameters(), get_ktau(), get_family() bicop_dist, vinecop_dist vine_dist objects (#95, #107, #109). new convenience functions get_matrix(), get_all_pair_copulas(), get_all_parameters(), get_all_ktaus(), get_all_families() vinecop_dist vine_dist objects (#95, #107, #109). new (dim) improved (print, summary logLik) generic methods vinecop_dist vine_dist objects (#104, #109, #110). new function pseudo_obs compute pseudo-observations (#108). improved documentation (#98, #100). improved sanity checks error messages (#99, #102). BUG FIXES make mcor correction less aggressive (#103). fix truncation pdf values (#103). use increased search interval parameter estimation initial fit unreasonable (#103). ensure boundaries respected Joe’s hinv methods (#103). improve numerical stability restrictive parameter bounds Joe BB7 copulas (#103).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02710-march-1-2018","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.7.1.0 (March 1, 2018)","title":"rvinecopulib 0.2.7.1.0 (March 1, 2018)","text":"CRAN release: 2018-03-02 Release following updates vinecopulib 0.2.7, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES new criterion tree selection \"mcor\". BUG FIXES fix bandwidth scaling family \"tll\".","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02611-february-24-2018","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.6.1.1 (February 24, 2018)","title":"rvinecopulib 0.2.6.1.1 (February 24, 2018)","text":"CRAN release: 2018-02-25 Patch rvinecopulib 0.2.6.1.0. BUG FIXES corrected documentation items.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02610-february-23-2018","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.6.1.0 (February 23, 2018)","title":"rvinecopulib 0.2.6.1.0 (February 23, 2018)","text":"Release following updates vinecopulib 0.2.6, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES add checks data (0, 1). improved bandwidth selection method \"tll\" scaling maximum-correlation coefficient. add mBICV criterion select truncation level threshold along new function mBICV(). BUG FIXES fix calculation Hoeffding’s D.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02510-january-14-2017","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.5.1.0 (January 14, 2017)","title":"rvinecopulib 0.2.5.1.0 (January 14, 2017)","text":"CRAN release: 2018-01-14 Release following updates vinecopulib 0.2.4 0.2.5, see https://github.com/vinecopulib/vinecopulib/releases. relevant changes summarized . NEW FEATURES faster simulation pdf functions truncated vines. speed vine copula algorithms pre-computing information related vine structure. selected threshold parameter can returned vinecop object. BUG FIXES make bb8 lower bound ensure feasible computations par_to_tau(). default initialize Rcout (#277). fix storage order pair copulas structure fixed. fixed selection algorithm threshold truncation level.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02310-november-18-2017","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.3.1.0 (November 18, 2017)","title":"rvinecopulib 0.2.3.1.0 (November 18, 2017)","text":"CRAN release: 2017-11-18 Release following update vinecopulib 0.2.3, see https://github.com/vinecopulib/vinecopulib/releases/tag/v0.2.3. relevant changes summarized . NEW FEATURES faster implementation Archimedean pdfs. BUG FIXES add safeguards bicop()/vinecop() called insufficient data. fix segfault issue completing truncated vine fit. make par_method = \"itau\" respect parameter bounds.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02210-november-9-2017","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.2.1.0 (November 9, 2017)","title":"rvinecopulib 0.2.2.1.0 (November 9, 2017)","text":"Release following updates vinecopulib 0.2.1 0.2.2, see https://github.com/vinecopulib/vinecopulib/releases/tag/v0.2.1 https://github.com/vinecopulib/vinecopulib/releases/tag/v0.2.2. relevant changes summarized . NEW FEATURES faster vine copula estimation selection parallelizing sub-routines. enhanced cross-platform compatibility. increased precision maximum-likelihood estimators. allow \"loglik\" selection criterion. BUG FIXES fixed itau estimation method Frank copulas (allowed positive parameters). make interpolation grid symmetric around (0.5, 0.5) (\"tll\" estimator).","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-02010-october-30-2017","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.2.0.1.0 (October 30, 2017)","title":"rvinecopulib 0.2.0.1.0 (October 30, 2017)","text":"CRAN release: 2017-10-30 Release following update vinecopulib 0.2.0, see https://github.com/vinecopulib/vinecopulib/releases/tag/v0.2.0. relevant changes summarized . PACKAGING/DEPENDECY C++ core library (besides wrappers) now header , R packages can access functionality easily via LinkingTo. removed dependency NLopt. NEW FEATURES NA handling. parallelized selection/estimation (pair-) copulas, see cores argument bicop() vinecop(). efficient storage fitting truncated vines. Brent line search (profile-) maximum-likelihood estimation one-parameter families. restrictive parameter bounds Archimedean families, ensuring numerical stability. BUG FIXES error thrown whenever vinecop() bicop() called data sets containing single row. made order rvinecop(..., U) consistent d = 2 d > 2. fixed bug interpolation kernel estimators near upper right corner. interpolation grid now symmetric around (0.5, 0.5). stabilized quadratic tll estimator near zero. stabilized Archimedean pdfs.","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-01011-september-1-2017","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.1.0.1.1 (September 1, 2017)","title":"rvinecopulib 0.1.0.1.1 (September 1, 2017)","text":"CRAN release: 2017-09-01 BUG FIXES Improve portability using mathematical functions","code":""},{"path":"https://vinecopulib.github.io/rvinecopulib/news/index.html","id":"rvinecopulib-01010-august-29-2017","dir":"Changelog","previous_headings":"","what":"rvinecopulib 0.1.0.1.0 (August 29, 2017)","title":"rvinecopulib 0.1.0.1.0 (August 29, 2017)","text":"CRAN release: 2017-08-30 Initial release.","code":""}]
